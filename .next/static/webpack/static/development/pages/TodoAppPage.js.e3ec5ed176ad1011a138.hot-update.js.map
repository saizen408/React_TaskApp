{"version":3,"file":"static/webpack/static/development/pages/TodoAppPage.js.e3ec5ed176ad1011a138.hot-update.js","sources":["webpack:///./components/TodoList.js"],"sourcesContent":["import React, { PureComponent } from \"react\";\nimport DraggableTodoList from \"./DraggableTodoList\";\nimport { withSortedContext } from \"./contexts/SortedContext\";\nimport { withCookies, Cookies } from \"react-cookie\";\nconst cookies = new Cookies();\nimport uuid from \"uuid/v4\";\n\nclass TodoList extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: /*cookies.get(\"tasks\")||*/ props.posts,\n      prevArr: []\n    };\n  }\n\n  onSortEnd = ({ oldIndex, newIndex }) => {\n    const { tasks, prevArr } = this.state;\n\n    console.log(\"before sort: \", prevArr);\n    if (prevArr.length === 0) {\n      var arr = cookies.get(\"tasks\");\n      //if prevArr is same size as state.tasks change nothing\n    } else if (prevArr.length === tasks.length) {\n      var arr = prevArr;\n      //if prev arr is smaller than state.tasks push the new element to the end\n    } else if (prevArr.length < tasks.length) {\n      this.setState({\n        prevArr: [...prevArr, tasks[tasks.length - 1]]\n      });\n      var arr = prevArr;\n      //if prev arr is larger than state.tasks filter out the corresponding element\n    } else if (prevArr.length > tasks.length) {\n      this.setState({\n        prevArr: prevArr.filter(task => task._id !== tasks._id)\n      });\n      var arr = prevArr;\n    } else {\n      return console.log(\n        \"something did not go quite as planned with sorting...\"\n      );\n    }\n\n    arr = arr.slice();\n    arr.splice(\n      newIndex < 0 ? arr.length + newIndex : newIndex,\n      0,\n      arr.splice(oldIndex, 1)[0]\n    );\n    console.log(\"after sort: \", arr);\n    this.setState(\n      {\n        tasks: arr,\n        prevArr: arr\n      },\n      cookies.set(\"tasks\", this.state.tasks),\n      console.log(\"ping!!!\"),\n      (this.props.sortedContext.updateState = false)\n    );\n  };\n\n  componentDidUpdate(prevState) {\n    if (prevState.tasks !== this.state.tasks) {\n      console.log(\"comp did update, set tasks!\");\n      cookies.set(\"tasks\", this.state.tasks);\n    }\n    // if (this.state.tasks.length === 1) {\n    //   let firstId = cookies.get(\"taskId\");\n    //   let fakeobj = {\n    //     _id: firstId,\n    //     description: this.state.tasks[0].description,\n    //     completed: this.state.tasks[0].completed,\n    //     updatedAt: this.state.tasks[0].updatedAt\n    //   };\n    //   this.setState({ tasks: fakeobj });\n    // }\n  }\n\n  // shouldComponentUpdate()\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.sortedContext.updateState) {\n      props.sortedContext.updateState = false;\n      const { type, id, todo } = props.sortedContext.type;\n      console.log(\"props.sortedContext: \", id);\n      const { tasks } = state;\n      // const taskId = cookies.get(\"taskId\");\n      // cookies.set(\"tasks\", tasks);\n\n      switch (type) {\n        case \"ADD\":\n          return {\n            tasks: [\n              ...tasks,\n              {\n                _id: id,\n                description: todo,\n                completed: false\n              }\n            ]\n          };\n          break;\n        case \"REMOVE\":\n          return { tasks: tasks.filter(task => task._id !== id) }; //should refer to state\n        case \"TOGGLE\":\n          return {\n            tasks: tasks.map(\n              task =>\n                task._id === id ? { ...task, completed: !task.completed } : task //should refer to state\n            )\n          };\n          break;\n        case \"EDIT\":\n          return {\n            tasks: tasks.map(task =>\n              task._id === id ? { ...task, description: todo } : task\n            )\n          };\n          break;\n        default:\n          return null;\n      }\n    } else return null;\n  }\n\n  // componentWillReceiveProps(props) {\n  //   if (this.props.posts !== props.posts) {\n  //     this.setState({ newProps: this.props.posts });\n  //   }\n  // }\n\n  render() {\n    const { resetSort } = this.props.sortedContext;\n    const { posts } = this.props;\n\n    const { tasks } = this.state;\n    if (tasks.length)\n      return (\n        <DraggableTodoList\n          axis=\"y\"\n          distance={20}\n          onSortEnd={this.onSortEnd}\n          posts={tasks}\n          tasksDB={posts}\n          sorted={resetSort}\n        ></DraggableTodoList>\n      );\n    return null;\n  }\n}\n\nexport default withCookies(withSortedContext(TodoList));\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAQA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AADA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AADA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAKA;AACA;AAAA;AAEA;AACA;AAFA;AAQA;AACA;AAlDA;AACA;AAAA;AAAA;AACA;AAFA;AAFA;AAMA;AACA;;;AA8CA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAgDA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;;;AApEA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAGA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAHA;AAHA;AAUA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AADA;AADA;AADA;AAMA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AADA;AADA;AAKA;AACA;AAAA;AACA;AA/BA;AAiCA;AACA;;;;AApHA;AACA;AA+IA;;;;A","sourceRoot":""}