{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport { useReducer, useEffect } from 'react'; //token , starter tasks?, reducer\n\nfunction useLocalStorageReducer(key, defaultVal, reducer) {\n  //make piece of state, based off of value in localstorage (or default)\n  //in case of a DB the key will equal the collection name\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, defaultVal, () => {\n    let val;\n\n    try {\n      val = JSON.parse(window.localStorage.getItem(key) || String(defaultVal));\n    } catch (e) {\n      val = defaultVal;\n    }\n\n    return val;\n  });\n  useEffect(() => {\n    window.localStorage.setItem(key, _JSON$stringify(state));\n  }, [state, key]);\n  return [state, dispatch];\n}\n\nexport { useLocalStorageReducer };","map":{"version":3,"sources":["/Users/ericowusu/Documents/React _Course_Projects/Next/first-next/components/hooks/useLocalStorageReducer.js"],"names":["useReducer","useEffect","useLocalStorageReducer","key","defaultVal","reducer","state","dispatch","val","JSON","parse","window","localStorage","getItem","String","e","setItem"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,OAAtC,C,CACA;;AACA,SAASC,sBAAT,CAAgCC,GAAhC,EAAqCC,UAArC,EAAiDC,OAAjD,EAA0D;AACxD;AACA;AACA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBP,UAAU,CAACK,OAAD,EAAUD,UAAV,EAAsB,MAAM;AAC9D,QAAII,GAAJ;;AACA,QAAI;AACFA,MAAAA,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BV,GAA5B,KAAoCW,MAAM,CAACV,UAAD,CAArD,CAAN;AACD,KAFD,CAEE,OAAOW,CAAP,EAAU;AACVP,MAAAA,GAAG,GAAGJ,UAAN;AACD;;AACD,WAAOI,GAAP;AACD,GARmC,CAApC;AAUAP,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4Bb,GAA5B,EAAiC,gBAAeG,KAAf,CAAjC;AACD,GAFQ,EAEN,CAACA,KAAD,EAAQH,GAAR,CAFM,CAAT;AAIA,SAAO,CAACG,KAAD,EAAQC,QAAR,CAAP;AACD;;AAED,SAASL,sBAAT","sourcesContent":["import { useReducer, useEffect } from 'react';\n//token , starter tasks?, reducer\nfunction useLocalStorageReducer(key, defaultVal, reducer) {\n  //make piece of state, based off of value in localstorage (or default)\n  //in case of a DB the key will equal the collection name\n  const [state, dispatch] = useReducer(reducer, defaultVal, () => {\n    let val;\n    try {\n      val = JSON.parse(window.localStorage.getItem(key) || String(defaultVal));\n    } catch (e) {\n      val = defaultVal;\n    }\n    return val;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [state, key]);\n\n  return [state, dispatch];\n}\n\nexport { useLocalStorageReducer };\n"]},"metadata":{},"sourceType":"module"}