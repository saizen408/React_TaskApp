{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport DraggableTodoList from \"./DraggableTodoList\";\nimport { withSortedContext } from \"./contexts/SortedContext\";\n\nvar TodoList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TodoList, _Component);\n\n  function TodoList(props) {\n    var _this;\n\n    _classCallCheck(this, TodoList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TodoList).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSortEnd\", function (_ref) {\n      var oldIndex = _ref.oldIndex,\n          newIndex = _ref.newIndex;\n      console.log(\"before sort: \", _this.props.posts);\n\n      if (_this.state.prevArr.length === 0) {\n        var arr = _this.props.posts;\n      } else {\n        var arr = _this.state.prevArr;\n      }\n\n      arr = arr.slice();\n      arr.splice(newIndex < 0 ? arr.length + newIndex : newIndex, 0, arr.splice(oldIndex, 1)[0]);\n      console.log(\"after sort: \", arr);\n\n      _this.setState({\n        tasks: arr,\n        prevArr: arr,\n        sorted: true\n      });\n    });\n\n    _this.state = {\n      tasks: props.posts,\n      prevArr: [],\n      sorted: false\n    };\n    return _this;\n  }\n\n  _createClass(TodoList, [{\n    key: \"render\",\n    value: function render() {\n      console.log(\"this.state.sorted: \", this.state.sorted);\n      var _this$props$sortedCon = this.props.sortedContext,\n          posts = _this$props$sortedCon.posts,\n          resetSort = _this$props$sortedCon.resetSort;\n      var tasks = this.state.tasks;\n      if (tasks.length) return __jsx(DraggableTodoList, {\n        axis: \"y\",\n        distance: 20,\n        onSortEnd: this.onSortEnd,\n        posts: tasks,\n        sorted: resetSort\n      });\n      return null;\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      //consider component did update\n      if (!state.sorted || props.sortedContext.isSorted) {\n        //check if props length is different from state length [add/delete]\n        if (props.posts.length !== state.tasks.length) {\n          // console.log(\"1st condition met\");\n          //update state to match props\n          return {\n            tasks: props.posts\n          }; //check if state length is equal to posts length\n        } // console.log(\"2nd condition met\");\n        //loop through each task in state\n\n\n        for (var i = 0; i < state.tasks.length; i++) {\n          //if props tasks equal state tasks completion, continue to next element\n          if (props.posts[i].completed === !state.tasks[i].completed) {\n            //if there is inequality of props vs. state completion, update state to match props\n            return {\n              tasks: props.posts\n            };\n          }\n\n          if (props.posts[i].description !== state.tasks[i].description) {\n            return {\n              tasks: props.posts\n            };\n          }\n        }\n\n        return null;\n      } else return null;\n    }\n  }]);\n\n  return TodoList;\n}(Component);\n\nexport default withSortedContext(TodoList);","map":{"version":3,"sources":["/Users/ericowusu/Documents/React _Course_Projects/Next/first-next/components/TodoList.js"],"names":["React","Component","DraggableTodoList","withSortedContext","TodoList","props","oldIndex","newIndex","console","log","posts","state","prevArr","length","arr","slice","splice","setState","tasks","sorted","sortedContext","resetSort","onSortEnd","isSorted","i","completed","description"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport DraggableTodoList from \"./DraggableTodoList\";\nimport { withSortedContext } from \"./contexts/SortedContext\";\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: props.posts,\n      prevArr: [],\n      sorted: false\n    };\n  }\n\n  onSortEnd = ({ oldIndex, newIndex }) => {\n    console.log(\"before sort: \", this.props.posts);\n    if (this.state.prevArr.length === 0) {\n      var arr = this.props.posts;\n    } else {\n      var arr = this.state.prevArr;\n    }\n\n    arr = arr.slice();\n    arr.splice(\n      newIndex < 0 ? arr.length + newIndex : newIndex,\n      0,\n      arr.splice(oldIndex, 1)[0]\n    );\n    console.log(\"after sort: \", arr);\n    this.setState({\n      tasks: arr,\n      prevArr: arr,\n      sorted: true\n    });\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    //consider component did update\n\n    if (!state.sorted || props.sortedContext.isSorted) {\n      //check if props length is different from state length [add/delete]\n      if (props.posts.length !== state.tasks.length) {\n        // console.log(\"1st condition met\");\n        //update state to match props\n        return { tasks: props.posts };\n        //check if state length is equal to posts length\n      }\n      // console.log(\"2nd condition met\");\n      //loop through each task in state\n      for (let i = 0; i < state.tasks.length; i++) {\n        //if props tasks equal state tasks completion, continue to next element\n        if (props.posts[i].completed === !state.tasks[i].completed) {\n          //if there is inequality of props vs. state completion, update state to match props\n          return { tasks: props.posts };\n        }\n        if (props.posts[i].description !== state.tasks[i].description) {\n          return { tasks: props.posts };\n        }\n      }\n      return null;\n    } else return null;\n  }\n\n  render() {\n    console.log(\"this.state.sorted: \", this.state.sorted);\n    const { posts, resetSort } = this.props.sortedContext;\n    const { tasks } = this.state;\n    if (tasks.length)\n      return (\n        <DraggableTodoList\n          axis=\"y\"\n          distance={20}\n          onSortEnd={this.onSortEnd}\n          posts={tasks}\n          sorted={resetSort}\n        ></DraggableTodoList>\n      );\n    return null;\n  }\n}\n\nexport default withSortedContext(TodoList);\n"]},"metadata":{},"sourceType":"module"}