{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport DraggableTodoList from \"./DraggableTodoList\";\nimport { TodosContext } from \"../components/contexts/todos.context\";\nimport { SortedContext, withSortedContext } from \"./contexts/SortedContext\";\n\nclass TodoList extends Component {\n  // static contextType = TodosContext;\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSortEnd\", ({\n      oldIndex,\n      newIndex\n    }) => {\n      console.log(\"before sort: \", this.props.posts);\n      let arr = this.props.posts;\n      arr = arr.slice();\n      arr.splice(newIndex < 0 ? arr.length + newIndex : newIndex, 0, arr.splice(oldIndex, 1)[0]);\n      console.log(\"after sort: \", arr);\n      this.setState({\n        tasks: arr,\n        sorted: !this.state.sorted\n      });\n      console.log(\"this.state.tasks: \", this.state.tasks);\n    });\n\n    this.state = {\n      tasks: props.posts,\n      sorted: false\n    }; // this.sorted = this.sorted.bind(this);\n  }\n\n  // sorted = () => {\n  //   console.log(\"running sorted function!\");\n  //   this.setState({\n  //     sorted: !this.props.sortedContext.isSorted\n  //   });\n  // };\n  static getDerivedStateFromProps(props, state) {\n    //consider component did update\n    // const { isSorted } = props.sortedContext;\n    console.log(\"state.sorted in GDSFP: \", state.sorted);\n    console.log(\"props.sortedContext: \", props);\n\n    if (!state.sorted || props.sortedContext.isSorted) {\n      //check if props length is different from state length [add/delete]\n      if (props.posts.length !== state.tasks.length) {\n        // console.log(\"1st condition met\");\n        //update state to match props\n        return {\n          tasks: props.posts\n        }; //check if state length is equal to posts length\n      }\n      /*else if (props.posts.length === state.tasks.length) {*/\n      // console.log(\"2nd condition met\");\n      //loop through each task in state\n\n\n      for (let i = 0; i < state.tasks.length; i++) {\n        //if props tasks equal state tasks completion, continue to next element\n        if (props.posts[i].completed === !state.tasks[i].completed) {\n          //if there is inequality of props vs. state completion, update state to match props\n          return {\n            tasks: props.posts\n          };\n        }\n\n        if (props.posts[i].description !== state.tasks[i].description) {\n          return {\n            tasks: props.posts\n          };\n        }\n      }\n      /*} else {*/\n\n\n      return null;\n    } else return null;\n  }\n\n  render() {\n    console.log(\"this.state.sorted: \", this.state.sorted);\n    const {\n      posts,\n      resetSort\n    } = this.props.sortedContext;\n    const {\n      tasks\n    } = this.state;\n    if (tasks.length) return __jsx(DraggableTodoList, {\n      axis: \"y\",\n      distance: 20,\n      onSortEnd: this.onSortEnd,\n      posts: tasks,\n      sorted: resetSort //instead of sorted\n\n    });\n    return null;\n  }\n\n}\n\nexport default withSortedContext(TodoList); // TodoList.contextType = SortedContext;","map":{"version":3,"sources":["/Users/ericowusu/Documents/React _Course_Projects/Next/first-next/components/TodoList.js"],"names":["React","Component","DraggableTodoList","TodosContext","SortedContext","withSortedContext","TodoList","constructor","props","oldIndex","newIndex","console","log","posts","arr","slice","splice","length","setState","tasks","sorted","state","getDerivedStateFromProps","sortedContext","isSorted","i","completed","description","render","resetSort","onSortEnd"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport DraggableTodoList from \"./DraggableTodoList\";\nimport { TodosContext } from \"../components/contexts/todos.context\";\nimport { SortedContext, withSortedContext } from \"./contexts/SortedContext\";\n\nclass TodoList extends Component {\n  // static contextType = TodosContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: props.posts,\n      sorted: false\n    };\n    // this.sorted = this.sorted.bind(this);\n  }\n\n  onSortEnd = ({ oldIndex, newIndex }) => {\n    console.log(\"before sort: \", this.props.posts);\n    let arr = this.props.posts;\n    arr = arr.slice();\n    arr.splice(\n      newIndex < 0 ? arr.length + newIndex : newIndex,\n      0,\n      arr.splice(oldIndex, 1)[0]\n    );\n    console.log(\"after sort: \", arr);\n    this.setState({\n      tasks: arr,\n      sorted: !this.state.sorted\n    });\n\n    console.log(\"this.state.tasks: \", this.state.tasks);\n  };\n\n  // sorted = () => {\n  //   console.log(\"running sorted function!\");\n  //   this.setState({\n  //     sorted: !this.props.sortedContext.isSorted\n  //   });\n  // };\n\n  static getDerivedStateFromProps(props, state) {\n    //consider component did update\n    // const { isSorted } = props.sortedContext;\n    console.log(\"state.sorted in GDSFP: \", state.sorted);\n    console.log(\"props.sortedContext: \", props);\n    if (!state.sorted || props.sortedContext.isSorted) {\n      //check if props length is different from state length [add/delete]\n      if (props.posts.length !== state.tasks.length) {\n        // console.log(\"1st condition met\");\n        //update state to match props\n        return { tasks: props.posts };\n        //check if state length is equal to posts length\n      } /*else if (props.posts.length === state.tasks.length) {*/\n      // console.log(\"2nd condition met\");\n      //loop through each task in state\n      for (let i = 0; i < state.tasks.length; i++) {\n        //if props tasks equal state tasks completion, continue to next element\n        if (props.posts[i].completed === !state.tasks[i].completed) {\n          //if there is inequality of props vs. state completion, update state to match props\n          return { tasks: props.posts };\n        }\n        if (props.posts[i].description !== state.tasks[i].description) {\n          return { tasks: props.posts };\n        }\n      }\n      /*} else {*/\n      return null;\n    } else return null;\n  }\n\n  render() {\n    console.log(\"this.state.sorted: \", this.state.sorted);\n    const { posts, resetSort } = this.props.sortedContext;\n    const { tasks } = this.state;\n    if (tasks.length)\n      return (\n        <DraggableTodoList\n          axis=\"y\"\n          distance={20}\n          onSortEnd={this.onSortEnd}\n          posts={tasks}\n          sorted={resetSort} //instead of sorted\n        ></DraggableTodoList>\n      );\n    return null;\n  }\n}\n\nexport default withSortedContext(TodoList);\n// TodoList.contextType = SortedContext;\n"]},"metadata":{},"sourceType":"module"}