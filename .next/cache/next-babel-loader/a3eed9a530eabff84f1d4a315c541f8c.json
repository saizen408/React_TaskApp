{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, memo } from \"react\";\nimport { SortableElement } from \"react-sortable-hoc\";\nimport useToggleState from \"./hooks/useToggleState\";\nimport EditTodoForm from \"./EditTodoForm\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { useSnackbar } from \"notistack\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport { DispatchContext } from \"./contexts/todos.context\";\nimport { LanguageContext } from \"./contexts/LanguageContext\";\nimport { Paper } from \"@material-ui/core\";\nimport moment from \"moment\";\nimport { words } from \"./words\"; // const words = {\n//   en: {\n//     addTodo: \"Add New Todo\",\n//     lastUpdated: \"Last Update: \"\n//   },\n//   fr: {\n//     addTodo: \"Ajouter un nouveau Todo\",\n//     lastUpdated: \"Dernières mises à jour: \"\n//   },\n//   es: {\n//     addTodo: \"Añadir nuevo Todo\",\n//     lastUpdated: \"Últimas actualizaciones: \"\n//   },\n//   de: {\n//     addTodo: \"Neuen Todo hinzufügen\",\n//     lastUpdated: \"Letzte Aktualisierung: \"\n//   },\n//   ja: { addTodo: \"新しいTodoを追加\", lastUpdated: \"最新の更新: \" }\n// };\n\nconst DraggableTodo = SortableElement(({\n  _id,\n  description,\n  completed,\n  updatedAt,\n  sorted\n}) => {\n  const dispatch = useContext(DispatchContext);\n  const {\n    language\n  } = useContext(LanguageContext);\n  const [isEditing, toggle] = useToggleState(false);\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    lastUpdated\n  } = words[language];\n\n  const handleDeleteClick = () => {\n    enqueueSnackbar(`Deleted Task: \"${description}\"`);\n  };\n\n  const handleEditClick = () => {\n    enqueueSnackbar(`Edited Task: \"${description}\"`);\n  };\n\n  const formatedDate = () => {\n    moment.locale(language);\n    return moment(updatedAt).format(\"lll\");\n  };\n\n  return __jsx(Paper, {\n    elevation: 3\n  }, __jsx(ListItem, {\n    style: {\n      height: \"65px\"\n    },\n    divider: true\n  }, isEditing ? __jsx(EditTodoForm, {\n    _id: _id,\n    sorted: sorted,\n    description: description,\n    toggleEditForm: toggle\n  }) : __jsx(React.Fragment, null, __jsx(Switch, {\n    tabIndex: -1,\n    onChange: () => {\n      dispatch({\n        type: \"TOGGLE\",\n        id: _id,\n        completed: completed\n      });\n      sorted();\n    },\n    checked: completed\n  }), __jsx(ListItemText, {\n    style: {\n      textDecoration: completed ? \"line-through\" : \"none\"\n    },\n    primary: description,\n    secondary: `Last Updated: ${formatedDate()}`\n  }), __jsx(ListItemSecondaryAction, null, __jsx(IconButton, {\n    \"aria-label\": \"Delete\",\n    onClick: () => {\n      dispatch({\n        type: \"REMOVE\",\n        id: _id\n      });\n      handleDeleteClick();\n      sorted(_id);\n    }\n  }, __jsx(DeleteIcon, null)), __jsx(IconButton, {\n    \"aria-label\": \"Edit\",\n    onClick: toggle\n  }, __jsx(EditIcon, null))), \" \")));\n});\nexport default memo(DraggableTodo);","map":{"version":3,"sources":["/Users/ericowusu/Documents/React _Course_Projects/Next/first-next/components/DraggableTodo.js"],"names":["React","useContext","memo","SortableElement","useToggleState","EditTodoForm","ListItemText","ListItem","IconButton","DeleteIcon","EditIcon","Switch","useSnackbar","ListItemSecondaryAction","DispatchContext","LanguageContext","Paper","moment","words","DraggableTodo","_id","description","completed","updatedAt","sorted","dispatch","language","isEditing","toggle","enqueueSnackbar","lastUpdated","handleDeleteClick","handleEditClick","formatedDate","locale","format","height","type","id","textDecoration"],"mappings":"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","sourcesContent":["import React, { useContext, memo } from \"react\";\nimport { SortableElement } from \"react-sortable-hoc\";\nimport useToggleState from \"./hooks/useToggleState\";\nimport EditTodoForm from \"./EditTodoForm\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { useSnackbar } from \"notistack\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport { DispatchContext } from \"./contexts/todos.context\";\nimport { LanguageContext } from \"./contexts/LanguageContext\";\nimport { Paper } from \"@material-ui/core\";\nimport moment from \"moment\";\nimport { words } from \"./words\";\n\n// const words = {\n//   en: {\n//     addTodo: \"Add New Todo\",\n//     lastUpdated: \"Last Update: \"\n//   },\n//   fr: {\n//     addTodo: \"Ajouter un nouveau Todo\",\n//     lastUpdated: \"Dernières mises à jour: \"\n//   },\n//   es: {\n//     addTodo: \"Añadir nuevo Todo\",\n//     lastUpdated: \"Últimas actualizaciones: \"\n//   },\n//   de: {\n//     addTodo: \"Neuen Todo hinzufügen\",\n//     lastUpdated: \"Letzte Aktualisierung: \"\n//   },\n\n//   ja: { addTodo: \"新しいTodoを追加\", lastUpdated: \"最新の更新: \" }\n// };\n\nconst DraggableTodo = SortableElement(\n  ({ _id, description, completed, updatedAt, sorted }) => {\n    const dispatch = useContext(DispatchContext);\n    const { language } = useContext(LanguageContext);\n    const [isEditing, toggle] = useToggleState(false);\n    const { enqueueSnackbar } = useSnackbar();\n    const { lastUpdated } = words[language];\n\n    const handleDeleteClick = () => {\n      enqueueSnackbar(`Deleted Task: \"${description}\"`);\n    };\n\n    const handleEditClick = () => {\n      enqueueSnackbar(`Edited Task: \"${description}\"`);\n    };\n\n    const formatedDate = () => {\n      moment.locale(language);\n      return moment(updatedAt).format(\"lll\");\n    };\n    return (\n      <Paper elevation={3}>\n        <ListItem style={{ height: \"65px\" }} divider={true}>\n          {isEditing ? (\n            <EditTodoForm\n              _id={_id}\n              sorted={sorted}\n              description={description}\n              toggleEditForm={toggle}\n            />\n          ) : (\n            <>\n              <Switch\n                tabIndex={-1}\n                onChange={() => {\n                  dispatch({ type: \"TOGGLE\", id: _id, completed: completed });\n                  sorted();\n                }}\n                checked={completed}\n              />\n              <ListItemText\n                style={{ textDecoration: completed ? \"line-through\" : \"none\" }}\n                primary={description}\n                secondary={`Last Updated: ${formatedDate()}`}\n              ></ListItemText>\n              <ListItemSecondaryAction>\n                <IconButton\n                  aria-label=\"Delete\"\n                  onClick={() => {\n                    dispatch({ type: \"REMOVE\", id: _id });\n                    handleDeleteClick();\n                    sorted(_id);\n                  }}\n                >\n                  <DeleteIcon></DeleteIcon>\n                </IconButton>\n                <IconButton aria-label=\"Edit\" onClick={toggle}>\n                  <EditIcon></EditIcon>\n                </IconButton>\n              </ListItemSecondaryAction>{\" \"}\n            </>\n          )}\n        </ListItem>\n      </Paper>\n    );\n  }\n);\n\nexport default memo(DraggableTodo);\n"]},"metadata":{},"sourceType":"module"}