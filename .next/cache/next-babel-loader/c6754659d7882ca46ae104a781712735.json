{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Router from 'next/router';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport styles from './styles/FormStyles';\nimport cubeSpinner from './styles/cubeSpinner';\nimport { LanguageContext } from './contexts/LanguageContext';\nvar words = {\n  english: {\n    signIn: 'Sign In',\n    emailLang: 'Email Address',\n    passwordLang: 'Password',\n    remember: 'Remember Me'\n  },\n  french: {\n    signIn: 'Se Connecter',\n    emailLang: 'Adresse Électronique',\n    passwordLang: 'Mot de Passe',\n    remember: 'Souviens-toi De Moi'\n  },\n  spanish: {\n    signIn: 'Registrarse',\n    emailLang: 'Correo Electrónico',\n    passwordLang: 'Contraseña',\n    remember: 'Recuérdame'\n  },\n  german: {\n    signIn: 'anmelden',\n    emailLang: 'E-Mail-Addresse',\n    passwordLang: 'Passwort',\n    remember: 'Behalte mich in Erinnerung'\n  },\n  日本語: {\n    signIn: 'サインイン',\n    emailLang: '電子メールアドレス',\n    passwordLang: 'パスワード',\n    remember: '私を覚えている'\n  }\n};\n\nvar Form =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Form).call(this, props));\n    _this.state = {\n      email: '',\n      password: '',\n      open: false,\n      snackMessage: '',\n      loading: false,\n      token: ''\n    };\n    _this.closeSnackbar = _this.closeSnackbar.bind(_assertThisInitialized(_this));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Form, [{\n    key: \"handleSubmit\",\n    value: function handleSubmit(evt) {\n      var proxyUrl, url, response, userInfo;\n      return _regeneratorRuntime.async(function handleSubmit$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              evt.preventDefault();\n              this.setState(function () {\n                return {\n                  loading: true\n                };\n              });\n              _context.prev = 2;\n              proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n              url = 'https://owusu-task-manager.herokuapp.com/users/login';\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(fetch(proxyUrl + url, {\n                method: 'POST',\n                body: _JSON$stringify(this.state),\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              }));\n\n            case 7:\n              response = _context.sent;\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 10:\n              userInfo = _context.sent;\n              this.setState(function () {\n                return {\n                  loading: false,\n                  token: userInfo.token\n                };\n              });\n              console.log(userInfo);\n              Router.push('/TodoAppPage');\n              _context.next = 21;\n              break;\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](2);\n              console.error('Error:', _context.t0);\n              Router.push('/');\n              this.setState({\n                loading: false,\n                open: true,\n                snackMessage: 'Email/Password incorrect'\n              });\n\n            case 21:\n              this.setState({\n                email: '',\n                password: ''\n              });\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[2, 16]]);\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(evt) {\n      this.setState(_defineProperty({}, evt.target.name, evt.target.value));\n    }\n  }, {\n    key: \"closeSnackbar\",\n    value: function closeSnackbar() {\n      this.setState({\n        open: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$context = this.context,\n          language = _this$context.language,\n          changeLanguage = _this$context.changeLanguage;\n      var classes = this.props.classes;\n      var _this$state = this.state,\n          email = _this$state.email,\n          password = _this$state.password,\n          snackMessage = _this$state.snackMessage,\n          open = _this$state.open,\n          loading = _this$state.loading;\n      var _words$language = words[language],\n          emailLang = _words$language.emailLang,\n          signIn = _words$language.signIn,\n          passwordLang = _words$language.passwordLang,\n          remember = _words$language.remember;\n\n      if (loading) {\n        return __jsx(\"div\", {\n          className: classes.loader\n        }, cubeSpinner());\n      }\n\n      return __jsx(\"main\", {\n        className: classes.main\n      }, __jsx(Paper, {\n        className: classes.paper\n      }, __jsx(Avatar, {\n        className: classes.avatar\n      }, __jsx(LockOutlinedIcon, null)), __jsx(Typography, {\n        variant: \"h5\"\n      }, signIn), __jsx(Select, {\n        value: language,\n        onChange: changeLanguage\n      }, __jsx(MenuItem, {\n        value: \"english\"\n      }, \"English\"), __jsx(MenuItem, {\n        value: \"french\"\n      }, \"French\"), __jsx(MenuItem, {\n        value: \"spanish\"\n      }, \"Spanish\"), __jsx(MenuItem, {\n        value: \"german\"\n      }, \"German\"), __jsx(MenuItem, {\n        value: \"\\u65E5\\u672C\\u8A9E\"\n      }, \"\\u65E5\\u672C\\u8A9E\")), __jsx(\"form\", {\n        className: classes.form,\n        onSubmit: this.handleSubmit\n      }, __jsx(FormControl, {\n        margin: \"normal\",\n        required: true,\n        fullWidth: true\n      }, __jsx(InputLabel, {\n        htmlFor: \"email\"\n      }, emailLang), __jsx(Input, {\n        id: \"email\",\n        name: \"email\",\n        value: email,\n        onChange: this.handleChange,\n        autoFocus: true\n      })), __jsx(FormControl, {\n        margin: \"normal\",\n        required: true,\n        fullWidth: true\n      }, __jsx(InputLabel, {\n        htmlFor: \"password\"\n      }, passwordLang), __jsx(Input, {\n        id: \"password\",\n        name: \"password\",\n        value: password,\n        onChange: this.handleChange,\n        autoFocus: true\n      })), __jsx(FormControlLabel, {\n        control: __jsx(Checkbox, {\n          color: \"primary\"\n        }),\n        label: remember\n      }), __jsx(Button, {\n        variant: \"contained\",\n        type: \"submit\",\n        fullWidth: true,\n        color: \"primary\",\n        className: classes.submit\n      }, signIn))), __jsx(Snackbar, {\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'left'\n        },\n        open: open,\n        autoHideDuration: 3000,\n        message: __jsx(\"span\", {\n          id: \"mesage-id\"\n        }, snackMessage, \" \"),\n        ContentProps: {\n          'aria-describedby': 'message-id'\n        },\n        onClose: this.closeSnackbar,\n        variant: \"error\",\n        action: [__jsx(IconButton, {\n          onClick: this.closeSnackbar,\n          color: \"inherit\",\n          key: \"close\",\n          \"aria-label\": \"close\"\n        }, __jsx(CloseIcon, null))]\n      }));\n    }\n  }]);\n\n  return Form;\n}(Component);\n\n_defineProperty(Form, \"contextType\", LanguageContext);\n\nexport default withStyles(styles)(Form);","map":{"version":3,"sources":["/Users/ericowusu/Documents/React _Course_Projects/Next/first-next/components/Form.js"],"names":["React","Component","Router","Avatar","Button","Snackbar","IconButton","CloseIcon","CssBaseline","FormControl","FormControlLabel","Checkbox","Input","InputLabel","LockOutlinedIcon","Paper","Typography","MenuItem","Select","withStyles","styles","cubeSpinner","LanguageContext","words","english","signIn","emailLang","passwordLang","remember","french","spanish","german","日本語","Form","props","state","email","password","open","snackMessage","loading","token","closeSnackbar","bind","handleChange","handleSubmit","evt","preventDefault","setState","proxyUrl","url","fetch","method","body","headers","response","json","userInfo","console","log","push","error","target","name","value","context","language","changeLanguage","classes","loader","main","paper","avatar","form","submit","vertical","horizontal"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Router from 'next/router';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport styles from './styles/FormStyles';\nimport cubeSpinner from './styles/cubeSpinner';\nimport { LanguageContext } from './contexts/LanguageContext';\n\nconst words = {\n  english: {\n    signIn: 'Sign In',\n    emailLang: 'Email Address',\n    passwordLang: 'Password',\n    remember: 'Remember Me'\n  },\n  french: {\n    signIn: 'Se Connecter',\n    emailLang: 'Adresse Électronique',\n    passwordLang: 'Mot de Passe',\n    remember: 'Souviens-toi De Moi'\n  },\n  spanish: {\n    signIn: 'Registrarse',\n    emailLang: 'Correo Electrónico',\n    passwordLang: 'Contraseña',\n    remember: 'Recuérdame'\n  },\n  german: {\n    signIn: 'anmelden',\n    emailLang: 'E-Mail-Addresse',\n    passwordLang: 'Passwort',\n    remember: 'Behalte mich in Erinnerung'\n  },\n\n  日本語: {\n    signIn: 'サインイン',\n    emailLang: '電子メールアドレス',\n    passwordLang: 'パスワード',\n    remember: '私を覚えている'\n  }\n};\nclass Form extends Component {\n  static contextType = LanguageContext;\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      open: false,\n      snackMessage: '',\n      loading: false,\n      token: ''\n    };\n    this.closeSnackbar = this.closeSnackbar.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async handleSubmit(evt) {\n    evt.preventDefault();\n\n    this.setState(() => ({ loading: true }));\n\n    try {\n      const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n      const url = 'https://owusu-task-manager.herokuapp.com/users/login';\n      const response = await fetch(proxyUrl + url, {\n        method: 'POST',\n        body: JSON.stringify(this.state),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      const userInfo = await response.json();\n      this.setState(() => ({ loading: false, token: userInfo.token }));\n\n      console.log(userInfo);\n      Router.push('/TodoAppPage');\n    } catch (error) {\n      console.error('Error:', error);\n      Router.push('/');\n      this.setState({\n        loading: false,\n        open: true,\n        snackMessage: 'Email/Password incorrect'\n      });\n    }\n    this.setState({ email: '', password: '' });\n  }\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  closeSnackbar() {\n    this.setState({ open: false });\n  }\n\n  render() {\n    const { language, changeLanguage } = this.context;\n    const { classes } = this.props;\n    const { email, password, snackMessage, open, loading } = this.state;\n    const { emailLang, signIn, passwordLang, remember } = words[language];\n\n    if (loading) {\n      return <div className={classes.loader}>{cubeSpinner()}</div>;\n    }\n\n    return (\n      <main className={classes.main}>\n        <Paper className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography variant=\"h5\">{signIn}</Typography>\n          <Select value={language} onChange={changeLanguage}>\n            <MenuItem value=\"english\">English</MenuItem>\n            <MenuItem value=\"french\">French</MenuItem>\n            <MenuItem value=\"spanish\">Spanish</MenuItem>\n            <MenuItem value=\"german\">German</MenuItem>\n            <MenuItem value=\"日本語\">日本語</MenuItem>\n          </Select>\n          <form className={classes.form} onSubmit={this.handleSubmit}>\n            <FormControl margin=\"normal\" required fullWidth>\n              <InputLabel htmlFor=\"email\">{emailLang}</InputLabel>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                value={email}\n                onChange={this.handleChange}\n                autoFocus\n              ></Input>\n            </FormControl>\n            <FormControl margin=\"normal\" required fullWidth>\n              <InputLabel htmlFor=\"password\">{passwordLang}</InputLabel>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                value={password}\n                onChange={this.handleChange}\n                autoFocus\n              ></Input>\n            </FormControl>\n            <FormControlLabel\n              control={<Checkbox color=\"primary\" />}\n              label={remember}\n            />\n            <Button\n              variant=\"contained\"\n              type=\"submit\"\n              fullWidth\n              color=\"primary\"\n              className={classes.submit}\n            >\n              {signIn}\n            </Button>\n          </form>\n        </Paper>\n        <Snackbar\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n          open={open}\n          autoHideDuration={3000}\n          message={<span id=\"mesage-id\">{snackMessage} </span>}\n          ContentProps={{ 'aria-describedby': 'message-id' }}\n          onClose={this.closeSnackbar}\n          variant=\"error\"\n          action={[\n            <IconButton\n              onClick={this.closeSnackbar}\n              color=\"inherit\"\n              key=\"close\"\n              aria-label=\"close\"\n            >\n              <CloseIcon />\n            </IconButton>\n          ]}\n        />\n      </main>\n    );\n  }\n}\n\nexport default withStyles(styles)(Form);\n"]},"metadata":{},"sourceType":"module"}