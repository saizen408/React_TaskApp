{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport DraggableTodoList from \"./DraggableTodoList\";\nimport { withSortedContext } from \"./contexts/SortedContext\";\n\nvar TodoList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TodoList, _Component);\n\n  function TodoList(props) {\n    var _this;\n\n    _classCallCheck(this, TodoList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TodoList).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSortEnd\", function (_ref) {\n      var oldIndex = _ref.oldIndex,\n          newIndex = _ref.newIndex;\n      console.log(\"before sort: \", _this.state.prevArr);\n\n      if (_this.state.prevArr.length === 0) {\n        var arr = _this.props.posts; //if prevArr is same size as state.tasks change nothing\n      } else if (_this.state.prevArr.length === _this.state.tasks.length) {\n        var arr = _this.state.prevArr; //when a new task is added ..it's not reflected in prevArr...duh!\n        //if prev arr is smaller than state.tasks push the new element to the end\n      } else if (_this.state.prevArr.length < _this.state.tasks.length) {\n        _this.setState({\n          prevArr: [].concat(_toConsumableArray(_this.state.prevArr), [_this.state.tasks[_this.state.tasks.length - 1]])\n        });\n\n        var arr = _this.state.prevArr; //if prev arr is larger than state.tasks filter out the corresponding element\n      } else if (_this.state.prevArr.length > _this.state.tasks.length) {\n        _this.setState({\n          prevArr: _this.state.prevArr.filter(function (task) {\n            return task.id !== _this.props.sortedContext._id;\n          })\n        });\n\n        var arr = _this.state.prevArr;\n      } else {\n        return console.log(\"something did not go quite as planned...\");\n      }\n\n      arr = arr.slice();\n      arr.splice(newIndex < 0 ? arr.length + newIndex : newIndex, 0, arr.splice(oldIndex, 1)[0]);\n      console.log(\"after sort: \", arr);\n\n      _this.setState({\n        tasks: arr,\n        prevArr: arr,\n        sorted: true\n      });\n    });\n\n    _this.state = {\n      tasks: props.posts,\n      prevArr: [],\n      sorted: false\n    };\n    return _this;\n  }\n\n  _createClass(TodoList, [{\n    key: \"render\",\n    value: function render() {\n      console.log(\"this.state.sorted: \", this.state.sorted);\n      var _this$props$sortedCon = this.props.sortedContext,\n          posts = _this$props$sortedCon.posts,\n          resetSort = _this$props$sortedCon.resetSort;\n      var tasks = this.state.tasks;\n      if (tasks.length) return __jsx(DraggableTodoList, {\n        axis: \"y\",\n        distance: 20,\n        onSortEnd: this.onSortEnd,\n        posts: tasks,\n        sorted: resetSort\n      });\n      return null;\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      //consider component did update\n      if (!state.sorted || props.sortedContext.isSorted) {\n        if (props.posts.length !== state.tasks.length) {\n          return {\n            tasks: props.posts\n          }; //probably should set to something else like state.tasks or state.prevArr...\n        }\n\n        for (var i = 0; i < state.tasks.length; i++) {\n          if (props.posts[i].completed === !state.tasks[i].completed) {\n            return {\n              tasks: props.posts\n            };\n          }\n\n          if (props.posts[i].description !== state.tasks[i].description) {\n            return {\n              tasks: props.posts\n            };\n          }\n        }\n\n        return null;\n      } else return null;\n    }\n  }]);\n\n  return TodoList;\n}(Component);\n\nexport default withSortedContext(TodoList);","map":{"version":3,"sources":["/Users/ericowusu/Documents/React _Course_Projects/Next/first-next/components/TodoList.js"],"names":["React","Component","DraggableTodoList","withSortedContext","TodoList","props","oldIndex","newIndex","console","log","state","prevArr","length","arr","posts","tasks","setState","filter","task","id","sortedContext","_id","slice","splice","sorted","resetSort","onSortEnd","isSorted","i","completed","description"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,iBAAT,QAAkC,0BAAlC;;IAEMC,Q;;;;;AACJ,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,kFAAMA,KAAN;;AADiB,gEASP,gBAA4B;AAAA,UAAzBC,QAAyB,QAAzBA,QAAyB;AAAA,UAAfC,QAAe,QAAfA,QAAe;AACtCC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,MAAKC,KAAL,CAAWC,OAAxC;;AACA,UAAI,MAAKD,KAAL,CAAWC,OAAX,CAAmBC,MAAnB,KAA8B,CAAlC,EAAqC;AACnC,YAAIC,GAAG,GAAG,MAAKR,KAAL,CAAWS,KAArB,CADmC,CAEnC;AACD,OAHD,MAGO,IAAI,MAAKJ,KAAL,CAAWC,OAAX,CAAmBC,MAAnB,KAA8B,MAAKF,KAAL,CAAWK,KAAX,CAAiBH,MAAnD,EAA2D;AAChE,YAAIC,GAAG,GAAG,MAAKH,KAAL,CAAWC,OAArB,CADgE,CAClC;AAE9B;AACD,OAJM,MAIA,IAAI,MAAKD,KAAL,CAAWC,OAAX,CAAmBC,MAAnB,GAA4B,MAAKF,KAAL,CAAWK,KAAX,CAAiBH,MAAjD,EAAyD;AAC9D,cAAKI,QAAL,CAAc;AACZL,UAAAA,OAAO,+BACF,MAAKD,KAAL,CAAWC,OADT,IAEL,MAAKD,KAAL,CAAWK,KAAX,CAAiB,MAAKL,KAAL,CAAWK,KAAX,CAAiBH,MAAjB,GAA0B,CAA3C,CAFK;AADK,SAAd;;AAMA,YAAIC,GAAG,GAAG,MAAKH,KAAL,CAAWC,OAArB,CAP8D,CAS9D;AACD,OAVM,MAUA,IAAI,MAAKD,KAAL,CAAWC,OAAX,CAAmBC,MAAnB,GAA4B,MAAKF,KAAL,CAAWK,KAAX,CAAiBH,MAAjD,EAAyD;AAC9D,cAAKI,QAAL,CAAc;AACZL,UAAAA,OAAO,EAAE,MAAKD,KAAL,CAAWC,OAAX,CAAmBM,MAAnB,CACP,UAAAC,IAAI;AAAA,mBAAIA,IAAI,CAACC,EAAL,KAAY,MAAKd,KAAL,CAAWe,aAAX,CAAyBC,GAAzC;AAAA,WADG;AADG,SAAd;;AAKA,YAAIR,GAAG,GAAG,MAAKH,KAAL,CAAWC,OAArB;AACD,OAPM,MAOA;AACL,eAAOH,OAAO,CAACC,GAAR,CAAY,0CAAZ,CAAP;AACD;;AAEDI,MAAAA,GAAG,GAAGA,GAAG,CAACS,KAAJ,EAAN;AACAT,MAAAA,GAAG,CAACU,MAAJ,CACEhB,QAAQ,GAAG,CAAX,GAAeM,GAAG,CAACD,MAAJ,GAAaL,QAA5B,GAAuCA,QADzC,EAEE,CAFF,EAGEM,GAAG,CAACU,MAAJ,CAAWjB,QAAX,EAAqB,CAArB,EAAwB,CAAxB,CAHF;AAKAE,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BI,GAA5B;;AACA,YAAKG,QAAL,CAAc;AACZD,QAAAA,KAAK,EAAEF,GADK;AAEZF,QAAAA,OAAO,EAAEE,GAFG;AAGZW,QAAAA,MAAM,EAAE;AAHI,OAAd;AAKD,KAnDkB;;AAEjB,UAAKd,KAAL,GAAa;AACXK,MAAAA,KAAK,EAAEV,KAAK,CAACS,KADF;AAEXH,MAAAA,OAAO,EAAE,EAFE;AAGXa,MAAAA,MAAM,EAAE;AAHG,KAAb;AAFiB;AAOlB;;;;6BAgEQ;AACPhB,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmC,KAAKC,KAAL,CAAWc,MAA9C;AADO,kCAEsB,KAAKnB,KAAL,CAAWe,aAFjC;AAAA,UAECN,KAFD,yBAECA,KAFD;AAAA,UAEQW,SAFR,yBAEQA,SAFR;AAAA,UAGCV,KAHD,GAGW,KAAKL,KAHhB,CAGCK,KAHD;AAIP,UAAIA,KAAK,CAACH,MAAV,EACE,OACE,MAAC,iBAAD;AACE,QAAA,IAAI,EAAC,GADP;AAEE,QAAA,QAAQ,EAAE,EAFZ;AAGE,QAAA,SAAS,EAAE,KAAKc,SAHlB;AAIE,QAAA,KAAK,EAAEX,KAJT;AAKE,QAAA,MAAM,EAAEU;AALV,QADF;AASF,aAAO,IAAP;AACD;;;6CAjC+BpB,K,EAAOK,K,EAAO;AAC5C;AACA,UAAI,CAACA,KAAK,CAACc,MAAP,IAAiBnB,KAAK,CAACe,aAAN,CAAoBO,QAAzC,EAAmD;AACjD,YAAItB,KAAK,CAACS,KAAN,CAAYF,MAAZ,KAAuBF,KAAK,CAACK,KAAN,CAAYH,MAAvC,EAA+C;AAC7C,iBAAO;AAAEG,YAAAA,KAAK,EAAEV,KAAK,CAACS;AAAf,WAAP,CAD6C,CACd;AAChC;;AACD,aAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,KAAK,CAACK,KAAN,CAAYH,MAAhC,EAAwCgB,CAAC,EAAzC,EAA6C;AAC3C,cAAIvB,KAAK,CAACS,KAAN,CAAYc,CAAZ,EAAeC,SAAf,KAA6B,CAACnB,KAAK,CAACK,KAAN,CAAYa,CAAZ,EAAeC,SAAjD,EAA4D;AAC1D,mBAAO;AAAEd,cAAAA,KAAK,EAAEV,KAAK,CAACS;AAAf,aAAP;AACD;;AACD,cAAIT,KAAK,CAACS,KAAN,CAAYc,CAAZ,EAAeE,WAAf,KAA+BpB,KAAK,CAACK,KAAN,CAAYa,CAAZ,EAAeE,WAAlD,EAA+D;AAC7D,mBAAO;AAAEf,cAAAA,KAAK,EAAEV,KAAK,CAACS;AAAf,aAAP;AACD;AACF;;AACD,eAAO,IAAP;AACD,OAbD,MAaO,OAAO,IAAP;AACR;;;;EAtEoBb,S;;AA0FvB,eAAeE,iBAAiB,CAACC,QAAD,CAAhC","sourcesContent":["import React, { Component } from \"react\";\nimport DraggableTodoList from \"./DraggableTodoList\";\nimport { withSortedContext } from \"./contexts/SortedContext\";\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: props.posts,\n      prevArr: [],\n      sorted: false\n    };\n  }\n\n  onSortEnd = ({ oldIndex, newIndex }) => {\n    console.log(\"before sort: \", this.state.prevArr);\n    if (this.state.prevArr.length === 0) {\n      var arr = this.props.posts;\n      //if prevArr is same size as state.tasks change nothing\n    } else if (this.state.prevArr.length === this.state.tasks.length) {\n      var arr = this.state.prevArr; //when a new task is added ..it's not reflected in prevArr...duh!\n\n      //if prev arr is smaller than state.tasks push the new element to the end\n    } else if (this.state.prevArr.length < this.state.tasks.length) {\n      this.setState({\n        prevArr: [\n          ...this.state.prevArr,\n          this.state.tasks[this.state.tasks.length - 1]\n        ]\n      });\n      var arr = this.state.prevArr;\n\n      //if prev arr is larger than state.tasks filter out the corresponding element\n    } else if (this.state.prevArr.length > this.state.tasks.length) {\n      this.setState({\n        prevArr: this.state.prevArr.filter(\n          task => task.id !== this.props.sortedContext._id\n        )\n      });\n      var arr = this.state.prevArr;\n    } else {\n      return console.log(\"something did not go quite as planned...\");\n    }\n\n    arr = arr.slice();\n    arr.splice(\n      newIndex < 0 ? arr.length + newIndex : newIndex,\n      0,\n      arr.splice(oldIndex, 1)[0]\n    );\n    console.log(\"after sort: \", arr);\n    this.setState({\n      tasks: arr,\n      prevArr: arr,\n      sorted: true\n    });\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    //consider component did update\n    if (!state.sorted || props.sortedContext.isSorted) {\n      if (props.posts.length !== state.tasks.length) {\n        return { tasks: props.posts }; //probably should set to something else like state.tasks or state.prevArr...\n      }\n      for (let i = 0; i < state.tasks.length; i++) {\n        if (props.posts[i].completed === !state.tasks[i].completed) {\n          return { tasks: props.posts };\n        }\n        if (props.posts[i].description !== state.tasks[i].description) {\n          return { tasks: props.posts };\n        }\n      }\n      return null;\n    } else return null;\n  }\n\n  render() {\n    console.log(\"this.state.sorted: \", this.state.sorted);\n    const { posts, resetSort } = this.props.sortedContext;\n    const { tasks } = this.state;\n    if (tasks.length)\n      return (\n        <DraggableTodoList\n          axis=\"y\"\n          distance={20}\n          onSortEnd={this.onSortEnd}\n          posts={tasks}\n          sorted={resetSort}\n        ></DraggableTodoList>\n      );\n    return null;\n  }\n}\n\nexport default withSortedContext(TodoList);\n"]},"metadata":{},"sourceType":"module"}