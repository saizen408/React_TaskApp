{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport { useReducer, useEffect } from 'react';\nimport axios from 'axios'; //token , starter tasks?, reducer\n\nfunction useDBReducer(token, defaultVal, todoReducer) {\n  //make piece of state, based off of value in localstorage (or default)\n  //in case of a DB the key will equal the collection name\n  var _useReducer = useReducer(todoReducer, defaultVal, function () {\n    //this function checks database for existing tasks for the user\n    var val;\n    var proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n    var targetUrl = 'https://owusu-task-manager.herokuapp.com/tasks';\n\n    function getData() {\n      var response;\n      return _regeneratorRuntime.async(function getData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(axios.get(proxyUrl + targetUrl, {\n                headers: {\n                  Authorization: 'Bearer ' + token.token\n                }\n              }));\n\n            case 3:\n              response = _context.sent;\n              val = response.data;\n              _context.next = 11;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Error:', _context.t0);\n              val = defaultVal;\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 7]]);\n    }\n\n    getData();\n    console.log(val);\n    return val;\n  }),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  console.log('state inside dbreducer:', state);\n  return [state, dispatch];\n}\n\nexport { useDBReducer }; // let val;\n// try {\n//   val = JSON.parse(\n//     window.localStorage.getItem(token) || String(defaultVal)\n//   );\n// } catch (e) {\n//   val = defaultVal;\n// }\n// return val;\n//   useEffect(() => {\n//     window.localStorage.setItem(token, JSON.stringify(state)); //use for post request (i.e update/delete/add tasks)\n//   }, [state, token]);","map":{"version":3,"sources":["/Users/ericowusu/Documents/React _Course_Projects/Next/first-next/components/hooks/useDBReducer.js"],"names":["useReducer","useEffect","axios","useDBReducer","token","defaultVal","todoReducer","val","proxyUrl","targetUrl","getData","get","headers","Authorization","response","data","console","error","log","state","dispatch"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,UAA7B,EAAyCC,WAAzC,EAAsD;AACpD;AACA;AAFoD,oBAG1BN,UAAU,CAACM,WAAD,EAAcD,UAAd,EAA0B,YAAM;AAClE;AACA,QAAIE,GAAJ;AACA,QAAMC,QAAQ,GAAG,sCAAjB;AACA,QAAMC,SAAS,GAAG,gDAAlB;;AAEA,aAAeC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAE2BR,KAAK,CAACS,GAAN,CAAUH,QAAQ,GAAGC,SAArB,EAAgC;AACrDG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,EAAE,YAAYT,KAAK,CAACA;AAAnC;AAD4C,eAAhC,CAF3B;;AAAA;AAEUU,cAAAA,QAFV;AAKIP,cAAAA,GAAG,GAAGO,QAAQ,CAACC,IAAf;AALJ;AAAA;;AAAA;AAAA;AAAA;AAOIC,cAAAA,OAAO,CAACC,KAAR,CAAc,QAAd;AACAV,cAAAA,GAAG,GAAGF,UAAN;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWAK,IAAAA,OAAO;AACPM,IAAAA,OAAO,CAACE,GAAR,CAAYX,GAAZ;AACA,WAAOA,GAAP;AACD,GApBmC,CAHgB;AAAA,MAG7CY,KAH6C;AAAA,MAGtCC,QAHsC;;AAyBpDJ,EAAAA,OAAO,CAACE,GAAR,CAAY,yBAAZ,EAAuCC,KAAvC;AACA,SAAO,CAACA,KAAD,EAAQC,QAAR,CAAP;AACD;;AAED,SAASjB,YAAT,G,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import { useReducer, useEffect } from 'react';\nimport axios from 'axios';\n//token , starter tasks?, reducer\n\nfunction useDBReducer(token, defaultVal, todoReducer) {\n  //make piece of state, based off of value in localstorage (or default)\n  //in case of a DB the key will equal the collection name\n  const [state, dispatch] = useReducer(todoReducer, defaultVal, () => {\n    //this function checks database for existing tasks for the user\n    let val;\n    const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n    const targetUrl = 'https://owusu-task-manager.herokuapp.com/tasks';\n\n    async function getData() {\n      try {\n        const response = await axios.get(proxyUrl + targetUrl, {\n          headers: { Authorization: 'Bearer ' + token.token }\n        });\n        val = response.data;\n      } catch (e) {\n        console.error('Error:', e);\n        val = defaultVal;\n      }\n    }\n    getData();\n    console.log(val);\n    return val;\n  });\n\n  console.log('state inside dbreducer:', state);\n  return [state, dispatch];\n}\n\nexport { useDBReducer };\n\n// let val;\n// try {\n//   val = JSON.parse(\n//     window.localStorage.getItem(token) || String(defaultVal)\n//   );\n// } catch (e) {\n//   val = defaultVal;\n// }\n// return val;\n\n//   useEffect(() => {\n//     window.localStorage.setItem(token, JSON.stringify(state)); //use for post request (i.e update/delete/add tasks)\n//   }, [state, token]);\n"]},"metadata":{},"sourceType":"module"}