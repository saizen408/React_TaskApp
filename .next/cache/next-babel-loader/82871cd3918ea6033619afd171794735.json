{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport Router from \"next/router\";\nimport { Cookies } from \"react-cookie\";\nvar cookies = new Cookies();\n\nvar authReducer = function authReducer(state, action) {\n  var data, proxyUrl, url, response, userInfo, token;\n  return _regeneratorRuntime.async(function authReducer$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.t0 = action.type;\n          _context.next = _context.t0 === \"LOGIN\" ? 3 : 25;\n          break;\n\n        case 3:\n          data = {\n            email: action.email,\n            password: action.password\n          };\n          _context.prev = 4;\n          proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\n          url = \"https://owusu-task-manager.herokuapp.com/users/login\";\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(fetch(proxyUrl + url, {\n            method: \"POST\",\n            body: _JSON$stringify(data),\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          }));\n\n        case 9:\n          response = _context.sent;\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 12:\n          userInfo = _context.sent;\n          token = userInfo.token;\n          cookies.set(\"token\", token);\n          state.token = token;\n          Router.push(\"/TodoAppPage\");\n          _context.next = 24;\n          break;\n\n        case 19:\n          _context.prev = 19;\n          _context.t1 = _context[\"catch\"](4);\n          state.error = true;\n          console.error(\"Error:\", _context.t1);\n          Router.push(\"/\");\n\n        case 24:\n          return _context.abrupt(\"return\", state);\n\n        case 25:\n          return _context.abrupt(\"return\", state);\n\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[4, 19]]);\n};\n\nexport default authReducer;","map":{"version":3,"sources":["/Users/ericowusu/Documents/React _Course_Projects/Next/first-next/components/reducers/authreducer.js"],"names":["Router","Cookies","cookies","authReducer","state","action","type","data","email","password","proxyUrl","url","fetch","method","body","headers","response","json","userInfo","token","set","push","error","console"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,SAASC,OAAT,QAAwB,cAAxB;AAEA,IAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB;;AACA,IAAME,WAAW,GAAG,SAAdA,WAAc,CAAOC,KAAP,EAAcC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACVA,MAAM,CAACC,IADG;AAAA,0CAEX,OAFW;AAAA;;AAAA;AAGVC,UAAAA,IAHU,GAGH;AACTC,YAAAA,KAAK,EAAEH,MAAM,CAACG,KADL;AAETC,YAAAA,QAAQ,EAAEJ,MAAM,CAACI;AAFR,WAHG;AAAA;AAQNC,UAAAA,QARM,GAQK,sCARL;AASNC,UAAAA,GATM,GASA,sDATA;AAAA;AAAA,2CAUWC,KAAK,CAACF,QAAQ,GAAGC,GAAZ,EAAiB;AAC3CE,YAAAA,MAAM,EAAE,MADmC;AAE3CC,YAAAA,IAAI,EAAE,gBAAeP,IAAf,CAFqC;AAG3CQ,YAAAA,OAAO,EAAE;AACP,8BAAgB;AADT;AAHkC,WAAjB,CAVhB;;AAAA;AAUNC,UAAAA,QAVM;AAAA;AAAA,2CAkBWA,QAAQ,CAACC,IAAT,EAlBX;;AAAA;AAkBNC,UAAAA,QAlBM;AAmBRC,UAAAA,KAnBQ,GAmBAD,QAAQ,CAACC,KAnBT;AAoBZjB,UAAAA,OAAO,CAACkB,GAAR,CAAY,OAAZ,EAAqBD,KAArB;AACAf,UAAAA,KAAK,CAACe,KAAN,GAAcA,KAAd;AAEAnB,UAAAA,MAAM,CAACqB,IAAP,CAAY,cAAZ;AAvBY;AAAA;;AAAA;AAAA;AAAA;AAyBZjB,UAAAA,KAAK,CAACkB,KAAN,GAAc,IAAd;AACAC,UAAAA,OAAO,CAACD,KAAR,CAAc,QAAd;AACAtB,UAAAA,MAAM,CAACqB,IAAP,CAAY,GAAZ;;AA3BY;AAAA,2CA6BPjB,KA7BO;;AAAA;AAAA,2CAgCPA,KAhCO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;;AAmCA,eAAeD,WAAf","sourcesContent":["import Router from \"next/router\";\nimport { Cookies } from \"react-cookie\";\n\nconst cookies = new Cookies();\nconst authReducer = async (state, action) => {\n  switch (action.type) {\n    case \"LOGIN\":\n      var data = {\n        email: action.email,\n        password: action.password\n      };\n      try {\n        const proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\n        const url = \"https://owusu-task-manager.herokuapp.com/users/login\";\n        const response = await fetch(proxyUrl + url, {\n          method: \"POST\",\n          body: JSON.stringify(data),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n\n        const userInfo = await response.json();\n        var token = userInfo.token;\n        cookies.set(\"token\", token);\n        state.token = token;\n\n        Router.push(\"/TodoAppPage\");\n      } catch (e) {\n        state.error = true;\n        console.error(\"Error:\", e);\n        Router.push(\"/\");\n      }\n      return state;\n\n    default:\n      return state;\n  }\n};\nexport default authReducer;\n"]},"metadata":{},"sourceType":"module"}