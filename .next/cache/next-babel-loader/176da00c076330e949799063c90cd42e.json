{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useContext, memo, useEffect } from \"react\";\nimport { SortableElement } from \"react-sortable-hoc\";\nimport useToggleState from \"./hooks/useToggleState\";\nimport EditTodoForm from \"./EditTodoForm\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { useSnackbar } from \"notistack\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport { DispatchContext } from \"./contexts/todos.context\";\nimport { LanguageContext } from \"./contexts/LanguageContext\";\nimport { Paper } from \"@material-ui/core\";\nimport moment from \"moment\";\nimport { words } from \"./words\";\nvar DraggableTodo = SortableElement(function (_ref) {\n  var _id = _ref._id,\n      description = _ref.description,\n      completed = _ref.completed,\n      updatedAt = _ref.updatedAt,\n      sorted = _ref.sorted,\n      tasksDBIdx = _ref.tasksDBIdx,\n      clicked = _ref.clicked;\n  var dispatch = useContext(DispatchContext);\n\n  var _useContext = useContext(LanguageContext),\n      language = _useContext.language;\n\n  var _useToggleState = useToggleState(false),\n      _useToggleState2 = _slicedToArray(_useToggleState, 2),\n      isEditing = _useToggleState2[0],\n      toggle = _useToggleState2[1];\n\n  var _useSnackbar = useSnackbar(),\n      enqueueSnackbar = _useSnackbar.enqueueSnackbar;\n\n  var lastUpdated = words[language].lastUpdated;\n\n  var handleDeleteClick = function handleDeleteClick() {\n    enqueueSnackbar(\"\\u274C Deleted Task: \\\"\".concat(description, \"\\\"\"));\n  };\n\n  var handleToggleClick = function handleToggleClick() {\n    enqueueSnackbar(\"Good work! \\uD83D\\uDCAA Task: \\\"\".concat(description, \"\\\" completed!\"));\n  };\n\n  var formatedDate = function formatedDate() {\n    moment.locale(language);\n    return moment(updatedAt).format(\"lll\");\n  }; // useEffect(() => {\n  //   window.localStorage.setItem(key, JSON.stringify(state));\n  // }, [tasksDBIdx]);\n\n\n  return __jsx(Paper, {\n    elevation: 3\n  }, __jsx(ListItem, {\n    style: {\n      height: \"65px\"\n    },\n    divider: true\n  }, isEditing ? __jsx(EditTodoForm, {\n    _id: _id,\n    tasksDBIdx: tasksDBIdx,\n    sorted: sorted,\n    description: description,\n    toggleEditForm: toggle\n  }) : __jsx(React.Fragment, null, __jsx(Switch, {\n    tabIndex: -1,\n    onChange: function onChange() {\n      sorted({\n        type: \"TOGGLE\",\n        id: _id,\n        completed: completed\n      });\n      dispatch({\n        type: \"TOGGLE\",\n        id: tasksDBIdx._id,\n        completed: completed\n      });\n      {\n        console.log(completed);\n        completed ? null : handleToggleClick();\n      }\n    },\n    checked: completed\n  }), __jsx(ListItemText, {\n    style: {\n      textDecoration: completed ? \"line-through\" : \"none\"\n    },\n    primary: description,\n    secondary: \"\".concat(lastUpdated, \": \").concat(formatedDate())\n  }), __jsx(ListItemSecondaryAction, null, __jsx(IconButton, {\n    \"aria-label\": \"Delete\",\n    onClick: function onClick() {\n      sorted({\n        type: \"REMOVE\",\n        id: _id\n      });\n      dispatch({\n        type: \"REMOVE\",\n        id: tasksDBIdx._id\n      });\n      handleDeleteClick();\n    }\n  }, __jsx(DeleteIcon, null)), __jsx(IconButton, {\n    \"aria-label\": \"Edit\",\n    onClick: toggle\n  }, __jsx(EditIcon, null))), \" \")));\n});\nexport default memo(DraggableTodo);","map":{"version":3,"sources":["/Users/ericowusu/Documents/React _Course_Projects/Next/first-next/components/DraggableTodo.js"],"names":["React","useContext","memo","useEffect","SortableElement","useToggleState","EditTodoForm","ListItemText","ListItem","IconButton","DeleteIcon","EditIcon","Switch","useSnackbar","ListItemSecondaryAction","DispatchContext","LanguageContext","Paper","moment","words","DraggableTodo","_id","description","completed","updatedAt","sorted","tasksDBIdx","clicked","dispatch","language","isEditing","toggle","enqueueSnackbar","lastUpdated","handleDeleteClick","handleToggleClick","formatedDate","locale","format","height","type","id","console","log","textDecoration"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,IAA5B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,uBAAP,MAAoC,2CAApC;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,KAAT,QAAsB,SAAtB;AAEA,IAAMC,aAAa,GAAGhB,eAAe,CACnC,gBAA6E;AAAA,MAA1EiB,GAA0E,QAA1EA,GAA0E;AAAA,MAArEC,WAAqE,QAArEA,WAAqE;AAAA,MAAxDC,SAAwD,QAAxDA,SAAwD;AAAA,MAA7CC,SAA6C,QAA7CA,SAA6C;AAAA,MAAlCC,MAAkC,QAAlCA,MAAkC;AAAA,MAA1BC,UAA0B,QAA1BA,UAA0B;AAAA,MAAdC,OAAc,QAAdA,OAAc;AAC3E,MAAMC,QAAQ,GAAG3B,UAAU,CAACc,eAAD,CAA3B;;AAD2E,oBAEtDd,UAAU,CAACe,eAAD,CAF4C;AAAA,MAEnEa,QAFmE,eAEnEA,QAFmE;;AAAA,wBAG/CxB,cAAc,CAAC,KAAD,CAHiC;AAAA;AAAA,MAGpEyB,SAHoE;AAAA,MAGzDC,MAHyD;;AAAA,qBAI/ClB,WAAW,EAJoC;AAAA,MAInEmB,eAJmE,gBAInEA,eAJmE;;AAAA,MAKnEC,WALmE,GAKnDd,KAAK,CAACU,QAAD,CAL8C,CAKnEI,WALmE;;AAO3E,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9BF,IAAAA,eAAe,kCAAqBV,WAArB,QAAf;AACD,GAFD;;AAIA,MAAMa,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9BH,IAAAA,eAAe,2CAAyBV,WAAzB,mBAAf;AACD,GAFD;;AAIA,MAAMc,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBlB,IAAAA,MAAM,CAACmB,MAAP,CAAcR,QAAd;AACA,WAAOX,MAAM,CAACM,SAAD,CAAN,CAAkBc,MAAlB,CAAyB,KAAzB,CAAP;AACD,GAHD,CAf2E,CAoB3E;AACA;AACA;;;AAEA,SACE,MAAC,KAAD;AAAO,IAAA,SAAS,EAAE;AAAlB,KACE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjB;AAAqC,IAAA,OAAO,EAAE;AAA9C,KACGT,SAAS,GACR,MAAC,YAAD;AACE,IAAA,GAAG,EAAET,GADP;AAEE,IAAA,UAAU,EAAEK,UAFd;AAGE,IAAA,MAAM,EAAED,MAHV;AAIE,IAAA,WAAW,EAAEH,WAJf;AAKE,IAAA,cAAc,EAAES;AALlB,IADQ,GASR,4BACE,MAAC,MAAD;AACE,IAAA,QAAQ,EAAE,CAAC,CADb;AAEE,IAAA,QAAQ,EAAE,oBAAM;AACdN,MAAAA,MAAM,CAAC;AAAEe,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,EAAE,EAAEpB,GAAtB;AAA2BE,QAAAA,SAAS,EAAEA;AAAtC,OAAD,CAAN;AACAK,MAAAA,QAAQ,CAAC;AACPY,QAAAA,IAAI,EAAE,QADC;AAEPC,QAAAA,EAAE,EAAEf,UAAU,CAACL,GAFR;AAGPE,QAAAA,SAAS,EAAEA;AAHJ,OAAD,CAAR;AAKA;AACEmB,QAAAA,OAAO,CAACC,GAAR,CAAYpB,SAAZ;AACAA,QAAAA,SAAS,GAAG,IAAH,GAAUY,iBAAiB,EAApC;AACD;AACF,KAbH;AAcE,IAAA,OAAO,EAAEZ;AAdX,IADF,EAiBE,MAAC,YAAD;AACE,IAAA,KAAK,EAAE;AAAEqB,MAAAA,cAAc,EAAErB,SAAS,GAAG,cAAH,GAAoB;AAA/C,KADT;AAEE,IAAA,OAAO,EAAED,WAFX;AAGE,IAAA,SAAS,YAAKW,WAAL,eAAqBG,YAAY,EAAjC;AAHX,IAjBF,EAsBE,MAAC,uBAAD,QACE,MAAC,UAAD;AACE,kBAAW,QADb;AAEE,IAAA,OAAO,EAAE,mBAAM;AACbX,MAAAA,MAAM,CAAC;AAAEe,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,EAAE,EAAEpB;AAAtB,OAAD,CAAN;AACAO,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,EAAE,EAAEf,UAAU,CAACL;AAAjC,OAAD,CAAR;AACAa,MAAAA,iBAAiB;AAClB;AANH,KAQE,MAAC,UAAD,OARF,CADF,EAWE,MAAC,UAAD;AAAY,kBAAW,MAAvB;AAA8B,IAAA,OAAO,EAAEH;AAAvC,KACE,MAAC,QAAD,OADF,CAXF,CAtBF,EAoC6B,GApC7B,CAVJ,CADF,CADF;AAsDD,CA/EkC,CAArC;AAkFA,eAAe7B,IAAI,CAACkB,aAAD,CAAnB","sourcesContent":["import React, { useContext, memo, useEffect } from \"react\";\nimport { SortableElement } from \"react-sortable-hoc\";\nimport useToggleState from \"./hooks/useToggleState\";\nimport EditTodoForm from \"./EditTodoForm\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { useSnackbar } from \"notistack\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport { DispatchContext } from \"./contexts/todos.context\";\nimport { LanguageContext } from \"./contexts/LanguageContext\";\nimport { Paper } from \"@material-ui/core\";\nimport moment from \"moment\";\nimport { words } from \"./words\";\n\nconst DraggableTodo = SortableElement(\n  ({ _id, description, completed, updatedAt, sorted, tasksDBIdx, clicked }) => {\n    const dispatch = useContext(DispatchContext);\n    const { language } = useContext(LanguageContext);\n    const [isEditing, toggle] = useToggleState(false);\n    const { enqueueSnackbar } = useSnackbar();\n    const { lastUpdated } = words[language];\n\n    const handleDeleteClick = () => {\n      enqueueSnackbar(`❌ Deleted Task: \"${description}\"`);\n    };\n\n    const handleToggleClick = () => {\n      enqueueSnackbar(`Good work! 💪 Task: \"${description}\" completed!`);\n    };\n\n    const formatedDate = () => {\n      moment.locale(language);\n      return moment(updatedAt).format(\"lll\");\n    };\n\n    // useEffect(() => {\n    //   window.localStorage.setItem(key, JSON.stringify(state));\n    // }, [tasksDBIdx]);\n\n    return (\n      <Paper elevation={3}>\n        <ListItem style={{ height: \"65px\" }} divider={true}>\n          {isEditing ? (\n            <EditTodoForm\n              _id={_id}\n              tasksDBIdx={tasksDBIdx}\n              sorted={sorted}\n              description={description}\n              toggleEditForm={toggle}\n            />\n          ) : (\n            <>\n              <Switch\n                tabIndex={-1}\n                onChange={() => {\n                  sorted({ type: \"TOGGLE\", id: _id, completed: completed });\n                  dispatch({\n                    type: \"TOGGLE\",\n                    id: tasksDBIdx._id,\n                    completed: completed\n                  });\n                  {\n                    console.log(completed);\n                    completed ? null : handleToggleClick();\n                  }\n                }}\n                checked={completed}\n              />\n              <ListItemText\n                style={{ textDecoration: completed ? \"line-through\" : \"none\" }}\n                primary={description}\n                secondary={`${lastUpdated}: ${formatedDate()}`}\n              ></ListItemText>\n              <ListItemSecondaryAction>\n                <IconButton\n                  aria-label=\"Delete\"\n                  onClick={() => {\n                    sorted({ type: \"REMOVE\", id: _id });\n                    dispatch({ type: \"REMOVE\", id: tasksDBIdx._id });\n                    handleDeleteClick();\n                  }}\n                >\n                  <DeleteIcon></DeleteIcon>\n                </IconButton>\n                <IconButton aria-label=\"Edit\" onClick={toggle}>\n                  <EditIcon></EditIcon>\n                </IconButton>\n              </ListItemSecondaryAction>{\" \"}\n            </>\n          )}\n        </ListItem>\n      </Paper>\n    );\n  }\n);\n\nexport default memo(DraggableTodo);\n"]},"metadata":{},"sourceType":"module"}