{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useContext, memo } from \"react\";\nimport { SortableElement } from \"react-sortable-hoc\";\nimport useToggleState from \"./hooks/useToggleState\";\nimport EditTodoForm from \"./EditTodoForm\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport { SnackbarProvider, useSnackbar } from \"notistack\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport { DispatchContext } from \"./contexts/todos.context\";\nimport { LanguageContext } from \"./contexts/LanguageContext\";\nimport { Typography } from \"@material-ui/core\";\nimport moment from \"moment\";\nvar words = {\n  en: {\n    addTodo: \"Add New Todo\",\n    lastUpdated: \"Last Update: \"\n  },\n  fr: {\n    addTodo: \"Ajouter un nouveau Todo\",\n    lastUpdated: \"Dernières mises à jour: \"\n  },\n  es: {\n    addTodo: \"Añadir nuevo Todo\",\n    lastUpdated: \"Últimas actualizaciones: \"\n  },\n  de: {\n    addTodo: \"Neuen Todo hinzufügen\",\n    lastUpdated: \"Letzte Aktualisierung: \"\n  },\n  ja: {\n    addTodo: \"新しいTodoを追加\",\n    lastUpdated: \"最新の更新: \"\n  }\n};\nvar DraggableTodo = SortableElement(function (_ref) {\n  var _id = _ref._id,\n      description = _ref.description,\n      completed = _ref.completed,\n      updatedAt = _ref.updatedAt;\n  var dispatch = useContext(DispatchContext);\n\n  var _useContext = useContext(LanguageContext),\n      language = _useContext.language;\n\n  var _useToggleState = useToggleState(false),\n      _useToggleState2 = _slicedToArray(_useToggleState, 2),\n      isEditing = _useToggleState2[0],\n      toggle = _useToggleState2[1];\n\n  var _useSnackbar = useSnackbar(),\n      enqueueSnackbar = _useSnackbar.enqueueSnackbar,\n      closeSnackbar = _useSnackbar.closeSnackbar;\n\n  var lastUpdated = words[language].lastUpdated;\n\n  var handleDeleteClick = function handleDeleteClick() {\n    enqueueSnackbar(\"Deleted Task: \\\"\".concat(description, \"\\\"\"));\n  };\n\n  var handleEditClick = function handleEditClick() {\n    enqueueSnackbar(\"Edited Task: \\\"\".concat(description, \"\\\"\"));\n  };\n\n  var formatedDate = function formatedDate() {\n    moment.locale(language);\n    return moment(updatedAt).format(\"lll\");\n  };\n\n  return __jsx(ListItem, {\n    style: {\n      height: \"65px\",\n      border: \"1px solid black\"\n    }\n  }, isEditing ? __jsx(EditTodoForm, {\n    _id: _id,\n    description: description,\n    toggleEditForm: toggle\n  }) : __jsx(React.Fragment, null, __jsx(Checkbox, {\n    tabIndex: -1,\n    checked: completed,\n    onClick: function onClick() {\n      dispatch({\n        type: \"TOGGLE\",\n        id: _id,\n        completed: completed\n      });\n    }\n  }), __jsx(ListItemText, {\n    style: {\n      textDecoration: completed ? \"line-through\" : \"none\"\n    }\n  }, description, __jsx(Typography, {\n    variant: \"subtitle2\"\n  }, lastUpdated, \": \", formatedDate())), __jsx(ListItemSecondaryAction, null, __jsx(IconButton, {\n    \"aria-label\": \"Delete\",\n    onClick: function onClick() {\n      dispatch({\n        type: \"REMOVE\",\n        id: _id\n      });\n      handleDeleteClick();\n    }\n  }, __jsx(DeleteIcon, null)), __jsx(IconButton, {\n    \"aria-label\": \"Edit\",\n    onClick: toggle\n  }, __jsx(EditIcon, null))), \" \"));\n});\nexport default memo(DraggableTodo);","map":{"version":3,"sources":["/Users/ericowusu/Documents/React _Course_Projects/Next/first-next/components/DraggableTodo.js"],"names":["React","useContext","memo","SortableElement","useToggleState","EditTodoForm","ListItemText","ListItem","Checkbox","IconButton","DeleteIcon","EditIcon","SnackbarProvider","useSnackbar","ListItemSecondaryAction","DispatchContext","LanguageContext","Typography","moment","words","en","addTodo","lastUpdated","fr","es","de","ja","DraggableTodo","_id","description","completed","updatedAt","dispatch","language","isEditing","toggle","enqueueSnackbar","closeSnackbar","handleDeleteClick","handleEditClick","formatedDate","locale","format","height","border","type","id","textDecoration"],"mappings":"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","sourcesContent":["import React, { useContext, memo } from \"react\";\nimport { SortableElement } from \"react-sortable-hoc\";\nimport useToggleState from \"./hooks/useToggleState\";\nimport EditTodoForm from \"./EditTodoForm\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport { SnackbarProvider, useSnackbar } from \"notistack\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport { DispatchContext } from \"./contexts/todos.context\";\nimport { LanguageContext } from \"./contexts/LanguageContext\";\nimport { Typography } from \"@material-ui/core\";\nimport moment from \"moment\";\n\nconst words = {\n  en: {\n    addTodo: \"Add New Todo\",\n    lastUpdated: \"Last Update: \"\n  },\n  fr: {\n    addTodo: \"Ajouter un nouveau Todo\",\n    lastUpdated: \"Dernières mises à jour: \"\n  },\n  es: {\n    addTodo: \"Añadir nuevo Todo\",\n    lastUpdated: \"Últimas actualizaciones: \"\n  },\n  de: {\n    addTodo: \"Neuen Todo hinzufügen\",\n    lastUpdated: \"Letzte Aktualisierung: \"\n  },\n\n  ja: { addTodo: \"新しいTodoを追加\", lastUpdated: \"最新の更新: \" }\n};\n\nconst DraggableTodo = SortableElement(\n  ({ _id, description, completed, updatedAt }) => {\n    const dispatch = useContext(DispatchContext);\n    const { language } = useContext(LanguageContext);\n    const [isEditing, toggle] = useToggleState(false);\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const { lastUpdated } = words[language];\n\n    const handleDeleteClick = () => {\n      enqueueSnackbar(`Deleted Task: \"${description}\"`);\n    };\n\n    const handleEditClick = () => {\n      enqueueSnackbar(`Edited Task: \"${description}\"`);\n    };\n\n    const formatedDate = () => {\n      moment.locale(language);\n      return moment(updatedAt).format(\"lll\");\n    };\n\n    return (\n      <ListItem style={{ height: \"65px\", border: \"1px solid black\" }}>\n        {isEditing ? (\n          <EditTodoForm\n            _id={_id}\n            description={description}\n            toggleEditForm={toggle}\n          />\n        ) : (\n          <>\n            <Checkbox\n              tabIndex={-1}\n              checked={completed}\n              onClick={() => {\n                dispatch({ type: \"TOGGLE\", id: _id, completed: completed });\n              }}\n            />\n            <ListItemText\n              style={{ textDecoration: completed ? \"line-through\" : \"none\" }}\n            >\n              {description}\n              <Typography variant=\"subtitle2\">\n                {lastUpdated}: {formatedDate()}\n              </Typography>\n            </ListItemText>\n            <ListItemSecondaryAction>\n              <IconButton\n                aria-label=\"Delete\"\n                onClick={() => {\n                  dispatch({ type: \"REMOVE\", id: _id });\n                  handleDeleteClick();\n                }}\n              >\n                <DeleteIcon></DeleteIcon>\n              </IconButton>\n              <IconButton aria-label=\"Edit\" onClick={toggle}>\n                <EditIcon></EditIcon>\n              </IconButton>\n            </ListItemSecondaryAction>{\" \"}\n          </>\n        )}\n      </ListItem>\n    );\n  }\n);\n\nexport default memo(DraggableTodo);\n"]},"metadata":{},"sourceType":"module"}