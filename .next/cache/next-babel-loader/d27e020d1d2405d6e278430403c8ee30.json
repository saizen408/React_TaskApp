{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useContext, memo } from \"react\";\nimport { SortableElement } from \"react-sortable-hoc\";\nimport useToggleState from \"./hooks/useToggleState\";\nimport EditTodoForm from \"./EditTodoForm\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { SnackbarProvider, useSnackbar } from \"notistack\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport { DispatchContext } from \"./contexts/todos.context\";\nimport { LanguageContext } from \"./contexts/LanguageContext\";\nimport { Typography, Paper } from \"@material-ui/core\";\nimport moment from \"moment\";\nvar words = {\n  en: {\n    addTodo: \"Add New Todo\",\n    lastUpdated: \"Last Update: \"\n  },\n  fr: {\n    addTodo: \"Ajouter un nouveau Todo\",\n    lastUpdated: \"Dernières mises à jour: \"\n  },\n  es: {\n    addTodo: \"Añadir nuevo Todo\",\n    lastUpdated: \"Últimas actualizaciones: \"\n  },\n  de: {\n    addTodo: \"Neuen Todo hinzufügen\",\n    lastUpdated: \"Letzte Aktualisierung: \"\n  },\n  ja: {\n    addTodo: \"新しいTodoを追加\",\n    lastUpdated: \"最新の更新: \"\n  }\n};\nvar DraggableTodo = SortableElement(function (_ref) {\n  var _id = _ref._id,\n      description = _ref.description,\n      completed = _ref.completed,\n      updatedAt = _ref.updatedAt,\n      sorted = _ref.sorted;\n  var dispatch = useContext(DispatchContext);\n\n  var _useContext = useContext(LanguageContext),\n      language = _useContext.language;\n\n  var _useToggleState = useToggleState(false),\n      _useToggleState2 = _slicedToArray(_useToggleState, 2),\n      isEditing = _useToggleState2[0],\n      toggle = _useToggleState2[1];\n\n  var _useSnackbar = useSnackbar(),\n      enqueueSnackbar = _useSnackbar.enqueueSnackbar,\n      closeSnackbar = _useSnackbar.closeSnackbar;\n\n  var lastUpdated = words[language].lastUpdated;\n\n  var handleDeleteClick = function handleDeleteClick() {\n    enqueueSnackbar(\"Deleted Task: \\\"\".concat(description, \"\\\"\"));\n  };\n\n  var handleEditClick = function handleEditClick() {\n    enqueueSnackbar(\"Edited Task: \\\"\".concat(description, \"\\\"\"));\n  };\n\n  var formatedDate = function formatedDate() {\n    moment.locale(language);\n    return moment(updatedAt).format(\"lll\");\n  }; // console.log(\"draggable todo rendered!\");\n\n\n  return __jsx(Paper, {\n    elevation: 3\n  }, __jsx(ListItem, {\n    style: {\n      height: \"65px\"\n    },\n    divider: true\n  }, isEditing ? __jsx(EditTodoForm, {\n    _id: _id,\n    sorted: sorted,\n    description: description,\n    toggleEditForm: toggle\n  }) : __jsx(React.Fragment, null, __jsx(Switch, {\n    tabIndex: -1,\n    onChange: function onChange() {\n      dispatch({\n        type: \"TOGGLE\",\n        id: _id,\n        completed: completed\n      });\n      sorted();\n    },\n    checked: completed\n  }), __jsx(ListItemText, {\n    style: {\n      textDecoration: completed ? \"line-through\" : \"none\"\n    },\n    primary: description,\n    secondary: \"Last Updated: \".concat(formatedDate())\n  }), __jsx(ListItemSecondaryAction, null, __jsx(IconButton, {\n    \"aria-label\": \"Delete\",\n    onClick: function onClick() {\n      dispatch({\n        type: \"REMOVE\",\n        id: _id\n      });\n      handleDeleteClick();\n    }\n  }, __jsx(DeleteIcon, null)), __jsx(IconButton, {\n    \"aria-label\": \"Edit\",\n    onClick: toggle\n  }, __jsx(EditIcon, null))), \" \")));\n});\nexport default memo(DraggableTodo);","map":{"version":3,"sources":["/Users/ericowusu/Documents/React _Course_Projects/Next/first-next/components/DraggableTodo.js"],"names":["React","useContext","memo","SortableElement","useToggleState","EditTodoForm","ListItemText","ListItem","Checkbox","IconButton","DeleteIcon","EditIcon","Switch","SnackbarProvider","useSnackbar","ListItemSecondaryAction","DispatchContext","LanguageContext","Typography","Paper","moment","words","en","addTodo","lastUpdated","fr","es","de","ja","DraggableTodo","_id","description","completed","updatedAt","sorted","dispatch","language","isEditing","toggle","enqueueSnackbar","closeSnackbar","handleDeleteClick","handleEditClick","formatedDate","locale","format","height","type","id","textDecoration"],"mappings":"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","sourcesContent":["import React, { useContext, memo } from \"react\";\nimport { SortableElement } from \"react-sortable-hoc\";\nimport useToggleState from \"./hooks/useToggleState\";\nimport EditTodoForm from \"./EditTodoForm\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Switch from \"@material-ui/core/Switch\";\n\nimport { SnackbarProvider, useSnackbar } from \"notistack\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport { DispatchContext } from \"./contexts/todos.context\";\nimport { LanguageContext } from \"./contexts/LanguageContext\";\nimport { Typography, Paper } from \"@material-ui/core\";\nimport moment from \"moment\";\n\nconst words = {\n  en: {\n    addTodo: \"Add New Todo\",\n    lastUpdated: \"Last Update: \"\n  },\n  fr: {\n    addTodo: \"Ajouter un nouveau Todo\",\n    lastUpdated: \"Dernières mises à jour: \"\n  },\n  es: {\n    addTodo: \"Añadir nuevo Todo\",\n    lastUpdated: \"Últimas actualizaciones: \"\n  },\n  de: {\n    addTodo: \"Neuen Todo hinzufügen\",\n    lastUpdated: \"Letzte Aktualisierung: \"\n  },\n\n  ja: { addTodo: \"新しいTodoを追加\", lastUpdated: \"最新の更新: \" }\n};\n\nconst DraggableTodo = SortableElement(\n  ({ _id, description, completed, updatedAt, sorted }) => {\n    const dispatch = useContext(DispatchContext);\n    const { language } = useContext(LanguageContext);\n    const [isEditing, toggle] = useToggleState(false);\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const { lastUpdated } = words[language];\n\n    const handleDeleteClick = () => {\n      enqueueSnackbar(`Deleted Task: \"${description}\"`);\n    };\n\n    const handleEditClick = () => {\n      enqueueSnackbar(`Edited Task: \"${description}\"`);\n    };\n\n    const formatedDate = () => {\n      moment.locale(language);\n      return moment(updatedAt).format(\"lll\");\n    };\n    // console.log(\"draggable todo rendered!\");\n    return (\n      <Paper elevation={3}>\n        <ListItem style={{ height: \"65px\" }} divider={true}>\n          {isEditing ? (\n            <EditTodoForm\n              _id={_id}\n              sorted={sorted}\n              description={description}\n              toggleEditForm={toggle}\n            />\n          ) : (\n            <>\n              <Switch\n                tabIndex={-1}\n                onChange={() => {\n                  dispatch({ type: \"TOGGLE\", id: _id, completed: completed });\n                  sorted();\n                }}\n                checked={completed}\n              />\n              <ListItemText\n                style={{ textDecoration: completed ? \"line-through\" : \"none\" }}\n                primary={description}\n                secondary={`Last Updated: ${formatedDate()}`}\n              ></ListItemText>\n              <ListItemSecondaryAction>\n                <IconButton\n                  aria-label=\"Delete\"\n                  onClick={() => {\n                    dispatch({ type: \"REMOVE\", id: _id });\n                    handleDeleteClick();\n                  }}\n                >\n                  <DeleteIcon></DeleteIcon>\n                </IconButton>\n                <IconButton aria-label=\"Edit\" onClick={toggle}>\n                  <EditIcon></EditIcon>\n                </IconButton>\n              </ListItemSecondaryAction>{\" \"}\n            </>\n          )}\n        </ListItem>\n      </Paper>\n    );\n  }\n);\n\nexport default memo(DraggableTodo);\n"]},"metadata":{},"sourceType":"module"}