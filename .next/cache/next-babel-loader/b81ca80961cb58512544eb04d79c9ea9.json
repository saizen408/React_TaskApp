{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport DraggableTodoList from \"./DraggableTodoList\";\nimport { withSortedContext } from \"./contexts/SortedContext\";\n\nvar TodoList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TodoList, _Component);\n\n  function TodoList(props) {\n    var _this;\n\n    _classCallCheck(this, TodoList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TodoList).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSortEnd\", function (_ref) {\n      var oldIndex = _ref.oldIndex,\n          newIndex = _ref.newIndex;\n      console.log(\"before sort: \", _this.state.prevArr);\n\n      if (_this.state.prevArr.length === 0) {\n        var arr = _this.props.posts; //if prevArr is same size as state.tasks change nothing\n      } else if (_this.state.prevArr.length === _this.state.tasks.length) {\n        var arr = _this.state.prevArr; //when a new task is added ..it's not reflected in prevArr...duh!\n        //if prev arr is smaller than state.tasks push the new element to the end\n      } else if (_this.state.prevArr.length < _this.state.tasks.length) {\n        _this.setState({\n          prevArr: [].concat(_toConsumableArray(_this.state.prevArr), [_this.state.tasks[_this.state.tasks.length - 1]])\n        });\n\n        var arr = _this.state.prevArr; //if prev arr is larger than state.tasks filter out the corresponding element\n      } else if (_this.state.prevArr.length > _this.state.tasks.length) {\n        _this.setState({\n          prevArr: _this.state.prevArr.filter(function (task) {\n            return task._id !== _this.props.sortedContext._id;\n          })\n        });\n\n        var arr = _this.state.prevArr;\n      } else {\n        return console.log(\"something did not go quite as planned...\");\n      }\n\n      arr = arr.slice();\n      arr.splice(newIndex < 0 ? arr.length + newIndex : newIndex, 0, arr.splice(oldIndex, 1)[0]);\n      console.log(\"after sort: \", arr);\n\n      _this.setState({\n        tasks: arr,\n        prevArr: arr // sorted: true\n\n      });\n    });\n\n    _this.state = {\n      tasks: props.posts,\n      prevArr: [],\n      sorted: false\n    };\n    return _this;\n  }\n\n  _createClass(TodoList, [{\n    key: \"render\",\n    value: function render() {\n      console.log(\"this.state.sorted: \", this.state.sorted);\n      var resetSort = this.props.sortedContext.resetSort;\n      var tasks = this.state.tasks;\n      if (tasks.length) return __jsx(DraggableTodoList, {\n        axis: \"y\",\n        distance: 20,\n        onSortEnd: this.onSortEnd,\n        posts: tasks,\n        sorted: resetSort\n      });\n      return null;\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    // static getDerivedStateFromProps(props, state) {\n    //   //consider component did update\n    //   if (!state.sorted || props.sortedContext.isSorted) {\n    //     if (props.posts.length !== state.tasks.length) {\n    //       return { tasks: props.posts }; //probably should set to something else like state.tasks or state.prevArr...\n    //     }\n    //     for (let i = 0; i < state.tasks.length; i++) {\n    //       if (props.posts[i].completed === !state.tasks[i].completed) {\n    //         return { tasks: props.posts };\n    //       }\n    //       if (props.posts[i].description !== state.tasks[i].description) {\n    //         return { tasks: props.posts };\n    //       }\n    //     }\n    //     return null;\n    //   } else return null;\n    // }\n    value: function getDerivedStateFromProps(props, state) {\n      // if (!state.sorted || props.sortedContext.isSorted) {\n      var _props$sortedContext = props.sortedContext,\n          action = _props$sortedContext.action,\n          _id = _props$sortedContext._id,\n          todo = _props$sortedContext.todo;\n      var tasks = state.tasks;\n\n      switch (action) {\n        case \"ADD\":\n          return {\n            tasks: [].concat(_toConsumableArray(tasks), [{\n              _id: _id,\n              description: todo,\n              completed: false\n            }])\n          };\n          break;\n\n        case \"REMOVE\":\n          return {\n            tasks: tasks.filter(function (task) {\n              return task._id !== _id;\n            })\n          };\n\n        case \"TOGGLE\":\n          return {\n            tasks: tasks.map(function (task) {\n              return task._id === _id ? _objectSpread({}, task, {\n                completed: !task.completed\n              }) : task;\n            })\n          };\n          break;\n\n        case \"EDIT\":\n          return {\n            tasks: tasks.map(function (task) {\n              return task._id === _id ? _objectSpread({}, task, {\n                description: todo\n              }) : task;\n            })\n          };\n          break;\n\n        default:\n          return {\n            tasks: tasks\n          };\n      } // } else return null;\n\n    }\n  }]);\n\n  return TodoList;\n}(Component);\n\nexport default withSortedContext(TodoList);","map":{"version":3,"sources":["/Users/ericowusu/Documents/React _Course_Projects/Next/first-next/components/TodoList.js"],"names":["React","Component","DraggableTodoList","withSortedContext","TodoList","props","oldIndex","newIndex","console","log","state","prevArr","length","arr","posts","tasks","setState","filter","task","_id","sortedContext","slice","splice","sorted","resetSort","onSortEnd","action","todo","description","completed","map"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport DraggableTodoList from \"./DraggableTodoList\";\nimport { withSortedContext } from \"./contexts/SortedContext\";\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: props.posts,\n      prevArr: [],\n      sorted: false\n    };\n  }\n\n  onSortEnd = ({ oldIndex, newIndex }) => {\n    console.log(\"before sort: \", this.state.prevArr);\n    if (this.state.prevArr.length === 0) {\n      var arr = this.props.posts;\n      //if prevArr is same size as state.tasks change nothing\n    } else if (this.state.prevArr.length === this.state.tasks.length) {\n      var arr = this.state.prevArr; //when a new task is added ..it's not reflected in prevArr...duh!\n\n      //if prev arr is smaller than state.tasks push the new element to the end\n    } else if (this.state.prevArr.length < this.state.tasks.length) {\n      this.setState({\n        prevArr: [\n          ...this.state.prevArr,\n          this.state.tasks[this.state.tasks.length - 1]\n        ]\n      });\n      var arr = this.state.prevArr;\n\n      //if prev arr is larger than state.tasks filter out the corresponding element\n    } else if (this.state.prevArr.length > this.state.tasks.length) {\n      this.setState({\n        prevArr: this.state.prevArr.filter(\n          task => task._id !== this.props.sortedContext._id\n        )\n      });\n      var arr = this.state.prevArr;\n    } else {\n      return console.log(\"something did not go quite as planned...\");\n    }\n\n    arr = arr.slice();\n    arr.splice(\n      newIndex < 0 ? arr.length + newIndex : newIndex,\n      0,\n      arr.splice(oldIndex, 1)[0]\n    );\n    console.log(\"after sort: \", arr);\n    this.setState({\n      tasks: arr,\n      prevArr: arr\n      // sorted: true\n    });\n  };\n\n  // static getDerivedStateFromProps(props, state) {\n  //   //consider component did update\n  //   if (!state.sorted || props.sortedContext.isSorted) {\n  //     if (props.posts.length !== state.tasks.length) {\n  //       return { tasks: props.posts }; //probably should set to something else like state.tasks or state.prevArr...\n  //     }\n  //     for (let i = 0; i < state.tasks.length; i++) {\n  //       if (props.posts[i].completed === !state.tasks[i].completed) {\n  //         return { tasks: props.posts };\n  //       }\n  //       if (props.posts[i].description !== state.tasks[i].description) {\n  //         return { tasks: props.posts };\n  //       }\n  //     }\n  //     return null;\n  //   } else return null;\n  // }\n  static getDerivedStateFromProps(props, state) {\n    // if (!state.sorted || props.sortedContext.isSorted) {\n    const { action, _id, todo } = props.sortedContext;\n    const { tasks } = state;\n\n    switch (action) {\n      case \"ADD\":\n        return {\n          tasks: [...tasks, { _id: _id, description: todo, completed: false }]\n        };\n        break;\n      case \"REMOVE\":\n        return { tasks: tasks.filter(task => task._id !== _id) };\n      case \"TOGGLE\":\n        return {\n          tasks: tasks.map(task =>\n            task._id === _id ? { ...task, completed: !task.completed } : task\n          )\n        };\n        break;\n      case \"EDIT\":\n        return {\n          tasks: tasks.map(task =>\n            task._id === _id ? { ...task, description: todo } : task\n          )\n        };\n        break;\n      default:\n        return { tasks: tasks };\n    }\n    // } else return null;\n  }\n\n  render() {\n    console.log(\"this.state.sorted: \", this.state.sorted);\n    const { resetSort } = this.props.sortedContext;\n    const { tasks } = this.state;\n    if (tasks.length)\n      return (\n        <DraggableTodoList\n          axis=\"y\"\n          distance={20}\n          onSortEnd={this.onSortEnd}\n          posts={tasks}\n          sorted={resetSort}\n        ></DraggableTodoList>\n      );\n    return null;\n  }\n}\n\nexport default withSortedContext(TodoList);\n"]},"metadata":{},"sourceType":"module"}