{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { useContext, useEffect, useState, Component } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport DraggableTodoList from \"./DraggableTodoList\";\nimport { TodosContext } from \"../components/contexts/todos.context\";\nimport { TodosProvider } from \"../components/contexts/todos.context\";\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSortEnd\", ({\n      oldIndex,\n      newIndex\n    }) => {\n      console.log(\"before sort: \", this.props.posts);\n      let arr = this.props.posts;\n      arr = arr.slice();\n      arr.splice(newIndex < 0 ? arr.length + newIndex : newIndex, 0, arr.splice(oldIndex, 1)[0]);\n      console.log(\"after sort: \", arr);\n      this.setState({\n        tasks: arr,\n        sorted: true\n      });\n      console.log(\"this.state.tasks: \", this.state.tasks); // return arr;\n    });\n\n    this.state = {\n      tasks: props.posts,\n      sorted: false\n    };\n    this.onSortEnd = this.onSortEnd.bind(this);\n  }\n\n  // console.log(this.state);\n  // this.setState({\n  //   tasks: arrayMove(this.state, oldIndex, newIndex)\n  // });\n  // // this.setState({\n  // //   tasks: arrayMove([4, 5, 6, 7, 8, 0], oldIndex, newIndex)\n  // // });\n  // componentDidUpdate(prevProps) {\n  //   if (this.props.posts !== prevProps.posts)\n  //     this.setState({\n  //       tasks: this.context\n  //     });\n  // }\n  //***activate whenever delete,add,edit,toggle */\n  // ***do not run after sorting\n  static getDerivedStateFromProps(props, state) {\n    console.log(\"state.sorted in GDSFP: \", state.sorted);\n\n    if (!state.sorted) {\n      //check if props length is different from state length [add/delete]\n      if (props.posts.length !== state.tasks.length) {\n        // console.log(\"1st condition met\");\n        //update state to match props\n        return {\n          tasks: props.posts\n        }; //check if state length is equal to posts length\n      }\n      /*else if (props.posts.length === state.tasks.length) {*/\n      // console.log(\"2nd condition met\");\n      //loop through each task in state\n\n\n      for (let i = 0; i < state.tasks.length; i++) {\n        //if props tasks equal state tasks completion, continue to next element\n        if (props.posts[i].completed === !state.tasks[i].completed) {\n          //if there is inequality of props vs. state completion, update state to match props\n          return {\n            tasks: props.posts\n          };\n        }\n\n        if (props.posts[i].description !== state.tasks[i].description) {\n          return {\n            tasks: props.posts\n          };\n        }\n      }\n      /*} else {*/\n\n\n      return null;\n    } else return null;\n  } //don't update the state if length, completed status haven't been changed else update\n  //check if completed is changed\n  // componentWillReceiveProps(nextProps) {\n  //   this.setState({\n  //     tasks: nextProps.posts\n  //   });\n  // }\n\n\n  render() {\n    console.log(\"todo list rendered!\"); // console.log(this.context);\n\n    const {\n      posts\n    } = this.props;\n    const {\n      tasks\n    } = this.state;\n    if (tasks.length) return __jsx(DraggableTodoList, {\n      axis: \"y\",\n      distance: 20,\n      onSortEnd: this.onSortEnd,\n      posts: tasks,\n      sorted: this.state.sorted\n    });\n    return null;\n  }\n\n}\n\n_defineProperty(TodoList, \"contextType\", TodosContext);\n\nexport default TodoList; // function TodoList(props) {\n//   if (props.posts.length)\n//     return (\n//       <DraggableTodoList\n//         axis=\"y\"\n//         distance={20}\n//         onSortEnd={onSortEnd}\n//         {...props}\n//       ></DraggableTodoList>\n//     );\n//   return null;\n// }\n// const [state, setState] = useState(initialVal);\n//   const toggle = () => {\n//     setState(!state);\n//   };\n\n/* <List>\n          {props.posts.map((todo, i) => (\n            <React.Fragment key={i}>\n              <Todo {...todo} key={todo._id} />\n              {i < props.posts.length - 1 && <Divider />}\n            </React.Fragment>\n          ))}\n</List> */","map":{"version":3,"sources":["/Users/ericowusu/Documents/React _Course_Projects/Next/first-next/components/TodoList.js"],"names":["React","useContext","useEffect","useState","Component","Paper","List","Divider","DraggableTodoList","TodosContext","TodosProvider","TodoList","constructor","props","oldIndex","newIndex","console","log","posts","arr","slice","splice","length","setState","tasks","sorted","state","onSortEnd","bind","getDerivedStateFromProps","i","completed","description","render"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState, Component } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport DraggableTodoList from \"./DraggableTodoList\";\nimport { TodosContext } from \"../components/contexts/todos.context\";\nimport { TodosProvider } from \"../components/contexts/todos.context\";\n\nclass TodoList extends Component {\n  static contextType = TodosContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: props.posts,\n      sorted: false\n    };\n    this.onSortEnd = this.onSortEnd.bind(this);\n  }\n\n  onSortEnd = ({ oldIndex, newIndex }) => {\n    console.log(\"before sort: \", this.props.posts);\n    let arr = this.props.posts;\n    arr = arr.slice();\n    arr.splice(\n      newIndex < 0 ? arr.length + newIndex : newIndex,\n      0,\n      arr.splice(oldIndex, 1)[0]\n    );\n    console.log(\"after sort: \", arr);\n    this.setState({\n      tasks: arr,\n      sorted: true\n    });\n    console.log(\"this.state.tasks: \", this.state.tasks);\n    // return arr;\n  };\n\n  // console.log(this.state);\n  // this.setState({\n  //   tasks: arrayMove(this.state, oldIndex, newIndex)\n  // });\n  // // this.setState({\n  // //   tasks: arrayMove([4, 5, 6, 7, 8, 0], oldIndex, newIndex)\n  // // });\n\n  // componentDidUpdate(prevProps) {\n  //   if (this.props.posts !== prevProps.posts)\n  //     this.setState({\n  //       tasks: this.context\n  //     });\n  // }\n  //***activate whenever delete,add,edit,toggle */\n  // ***do not run after sorting\n  static getDerivedStateFromProps(props, state) {\n    console.log(\"state.sorted in GDSFP: \", state.sorted);\n    if (!state.sorted) {\n      //check if props length is different from state length [add/delete]\n      if (props.posts.length !== state.tasks.length) {\n        // console.log(\"1st condition met\");\n        //update state to match props\n        return { tasks: props.posts };\n        //check if state length is equal to posts length\n      } /*else if (props.posts.length === state.tasks.length) {*/\n      // console.log(\"2nd condition met\");\n      //loop through each task in state\n      for (let i = 0; i < state.tasks.length; i++) {\n        //if props tasks equal state tasks completion, continue to next element\n        if (props.posts[i].completed === !state.tasks[i].completed) {\n          //if there is inequality of props vs. state completion, update state to match props\n          return { tasks: props.posts };\n        }\n        if (props.posts[i].description !== state.tasks[i].description) {\n          return { tasks: props.posts };\n        }\n      }\n      /*} else {*/\n      return null;\n    } else return null;\n  }\n\n  //don't update the state if length, completed status haven't been changed else update\n\n  //check if completed is changed\n\n  // componentWillReceiveProps(nextProps) {\n  //   this.setState({\n  //     tasks: nextProps.posts\n  //   });\n  // }\n\n  render() {\n    console.log(\"todo list rendered!\");\n    // console.log(this.context);\n    const { posts } = this.props;\n    const { tasks } = this.state;\n    if (tasks.length)\n      return (\n        <DraggableTodoList\n          axis=\"y\"\n          distance={20}\n          onSortEnd={this.onSortEnd}\n          posts={tasks}\n          sorted={this.state.sorted}\n        ></DraggableTodoList>\n      );\n    return null;\n  }\n}\n\nexport default TodoList;\n\n// function TodoList(props) {\n\n//   if (props.posts.length)\n//     return (\n//       <DraggableTodoList\n//         axis=\"y\"\n//         distance={20}\n//         onSortEnd={onSortEnd}\n//         {...props}\n//       ></DraggableTodoList>\n//     );\n//   return null;\n// }\n\n// const [state, setState] = useState(initialVal);\n//   const toggle = () => {\n//     setState(!state);\n//   };\n\n/* <List>\n          {props.posts.map((todo, i) => (\n            <React.Fragment key={i}>\n              <Todo {...todo} key={todo._id} />\n              {i < props.posts.length - 1 && <Divider />}\n            </React.Fragment>\n          ))}\n</List> */\n"]},"metadata":{},"sourceType":"module"}