{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport DraggableTodoList from \"./DraggableTodoList\";\nimport { withSortedContext } from \"./contexts/SortedContext\";\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSortEnd\", ({\n      oldIndex,\n      newIndex\n    }) => {\n      console.log(\"before sort: \", this.props.posts);\n\n      if (this.state.prevArr.length === 0) {\n        var arr = this.props.posts;\n      } else {\n        var arr = this.state.prevArr;\n      }\n\n      arr = arr.slice();\n      arr.splice(newIndex < 0 ? arr.length + newIndex : newIndex, 0, arr.splice(oldIndex, 1)[0]);\n      console.log(\"after sort: \", arr);\n      this.setState({\n        tasks: arr,\n        prevArr: arr,\n        sorted: true\n      });\n    });\n\n    this.state = {\n      tasks: props.posts,\n      prevArr: [],\n      sorted: false\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    //consider component did update\n    if (!state.sorted || props.sortedContext.isSorted) {\n      //check if props length is different from state length [add/delete]\n      if (props.posts.length !== state.tasks.length) {\n        // console.log(\"1st condition met\");\n        //update state to match props\n        return {\n          tasks: props.posts\n        }; //check if state length is equal to posts length\n      } // console.log(\"2nd condition met\");\n      //loop through each task in state\n\n\n      for (let i = 0; i < state.tasks.length; i++) {\n        //if props tasks equal state tasks completion, continue to next element\n        if (props.posts[i].completed === !state.tasks[i].completed) {\n          //if there is inequality of props vs. state completion, update state to match props\n          return {\n            tasks: props.posts\n          };\n        }\n\n        if (props.posts[i].description !== state.tasks[i].description) {\n          return {\n            tasks: props.posts\n          };\n        }\n      }\n\n      return null;\n    } else return null;\n  }\n\n  render() {\n    console.log(\"this.state.sorted: \", this.state.sorted);\n    const {\n      posts,\n      resetSort\n    } = this.props.sortedContext;\n    const {\n      tasks\n    } = this.state;\n    if (tasks.length) return __jsx(DraggableTodoList, {\n      axis: \"y\",\n      distance: 20,\n      onSortEnd: this.onSortEnd,\n      posts: tasks,\n      sorted: resetSort\n    });\n    return null;\n  }\n\n}\n\nexport default withSortedContext(TodoList);","map":{"version":3,"sources":["/Users/ericowusu/Documents/React _Course_Projects/Next/first-next/components/TodoList.js"],"names":["React","Component","DraggableTodoList","withSortedContext","TodoList","constructor","props","oldIndex","newIndex","console","log","posts","state","prevArr","length","arr","slice","splice","setState","tasks","sorted","getDerivedStateFromProps","sortedContext","isSorted","i","completed","description","render","resetSort","onSortEnd"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport DraggableTodoList from \"./DraggableTodoList\";\nimport { withSortedContext } from \"./contexts/SortedContext\";\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: props.posts,\n      prevArr: [],\n      sorted: false\n    };\n  }\n\n  onSortEnd = ({ oldIndex, newIndex }) => {\n    console.log(\"before sort: \", this.props.posts);\n    if (this.state.prevArr.length === 0) {\n      var arr = this.props.posts;\n    } else {\n      var arr = this.state.prevArr;\n    }\n\n    arr = arr.slice();\n    arr.splice(\n      newIndex < 0 ? arr.length + newIndex : newIndex,\n      0,\n      arr.splice(oldIndex, 1)[0]\n    );\n    console.log(\"after sort: \", arr);\n    this.setState({\n      tasks: arr,\n      prevArr: arr,\n      sorted: true\n    });\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    //consider component did update\n\n    if (!state.sorted || props.sortedContext.isSorted) {\n      //check if props length is different from state length [add/delete]\n      if (props.posts.length !== state.tasks.length) {\n        // console.log(\"1st condition met\");\n        //update state to match props\n        return { tasks: props.posts };\n        //check if state length is equal to posts length\n      }\n      // console.log(\"2nd condition met\");\n      //loop through each task in state\n      for (let i = 0; i < state.tasks.length; i++) {\n        //if props tasks equal state tasks completion, continue to next element\n        if (props.posts[i].completed === !state.tasks[i].completed) {\n          //if there is inequality of props vs. state completion, update state to match props\n          return { tasks: props.posts };\n        }\n        if (props.posts[i].description !== state.tasks[i].description) {\n          return { tasks: props.posts };\n        }\n      }\n      return null;\n    } else return null;\n  }\n\n  render() {\n    console.log(\"this.state.sorted: \", this.state.sorted);\n    const { posts, resetSort } = this.props.sortedContext;\n    const { tasks } = this.state;\n    if (tasks.length)\n      return (\n        <DraggableTodoList\n          axis=\"y\"\n          distance={20}\n          onSortEnd={this.onSortEnd}\n          posts={tasks}\n          sorted={resetSort}\n        ></DraggableTodoList>\n      );\n    return null;\n  }\n}\n\nexport default withSortedContext(TodoList);\n"]},"metadata":{},"sourceType":"module"}