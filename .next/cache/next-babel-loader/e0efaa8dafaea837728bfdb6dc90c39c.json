{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext } from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Switch from \"@material-ui/core/Switch\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"./styles/NavBarStyles\";\nimport { ThemeContext } from \"./contexts/ThemeContext\";\nimport { LanguageContext } from \"./contexts/LanguageContext\";\nimport { content } from \"./words\";\nvar IOSSwitch = withStyles(function (theme) {\n  return {\n    root: {\n      width: 42,\n      height: 26,\n      padding: 0,\n      margin: theme.spacing(1)\n    },\n    switchBase: {\n      padding: 1,\n      \"&$checked\": {\n        transform: \"translateX(16px)\",\n        color: theme.palette.common.white,\n        \"& + $track\": {\n          backgroundColor: \"#52d869\",\n          opacity: 1,\n          border: \"none\"\n        }\n      },\n      \"&$focusVisible $thumb\": {\n        color: \"#52d869\",\n        border: \"6px solid #fff\"\n      }\n    },\n    thumb: {\n      width: 24,\n      height: 24\n    },\n    track: {\n      borderRadius: 26 / 2,\n      border: \"1px solid \".concat(theme.palette.grey[400]),\n      backgroundColor: theme.palette.grey[50],\n      opacity: 1,\n      transition: theme.transitions.create([\"background-color\", \"border\"])\n    },\n    checked: {},\n    focusVisible: {}\n  };\n})(function (_ref) {\n  var classes = _ref.classes,\n      props = _objectWithoutProperties(_ref, [\"classes\"]);\n\n  return __jsx(Switch, _extends({\n    focusVisibleClassName: classes.focusVisible,\n    disableRipple: true,\n    classes: {\n      root: classes.root,\n      switchBase: classes.switchBase,\n      thumb: classes.thumb,\n      track: classes.track,\n      checked: classes.checked\n    }\n  }, props));\n});\n\nfunction Navbar(props) {\n  var _useContext = useContext(ThemeContext),\n      isDarkMode = _useContext.isDarkMode,\n      toggleTheme = _useContext.toggleTheme;\n\n  var _useContext2 = useContext(LanguageContext),\n      language = _useContext2.language;\n\n  var classes = props.classes;\n  var _content$language = content[language],\n      appTitle = _content$language.appTitle,\n      search = _content$language.search,\n      flag = _content$language.flag;\n\n  var _React$useState = React.useState({\n    checkedB: true\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var handleChange = function handleChange(name) {\n    return function (event) {\n      setState(_objectSpread({}, state, _defineProperty({}, name, event.target.checked)));\n      toggleTheme();\n    };\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(CssBaseline, null), __jsx(AppBar, {\n    position: \"static\",\n    color: isDarkMode ? \"default\" : \"primary\"\n  }, __jsx(Toolbar, null, __jsx(IconButton, {\n    className: classes.menuButton,\n    color: \"inherit\"\n  }, __jsx(\"span\", null, flag)), __jsx(Typography, {\n    className: classes.title,\n    variant: \"h6\",\n    color: \"inherit\"\n  }, appTitle), __jsx(IOSSwitch, {\n    checked: state.checkedB,\n    onChange: handleChange(\"checkedB\"),\n    value: \"checkedB\"\n  }), __jsx(\"div\", {\n    className: classes.grow\n  }), __jsx(\"div\", {\n    className: classes.search\n  }, __jsx(\"div\", {\n    className: classes.searchIcon\n  }, __jsx(SearchIcon, null)), __jsx(InputBase, {\n    placeholder: \"\".concat(search, \"...\"),\n    classes: {\n      root: classes.inputRoot,\n      input: classes.inputInput\n    }\n  })))));\n}\n\nexport default withStyles(styles)(Navbar);","map":null,"metadata":{},"sourceType":"module"}