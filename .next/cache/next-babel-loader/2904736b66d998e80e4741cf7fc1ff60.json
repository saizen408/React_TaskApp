{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport DraggableTodoList from \"./DraggableTodoList\";\nimport { withSortedContext } from \"./contexts/SortedContext\";\nimport { withCookies, Cookies } from \"react-cookie\";\nconst cookies = new Cookies();\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSortEnd\", ({\n      oldIndex,\n      newIndex\n    }) => {\n      const {\n        tasks,\n        prevArr\n      } = this.state;\n      console.log(\"before sort: \", prevArr);\n\n      if (prevArr.length === 0) {\n        var arr = cookies.get(\"tasks\"); //if prevArr is same size as state.tasks change nothing\n      } else if (prevArr.length === tasks.length) {\n        var arr = prevArr; //if prev arr is smaller than state.tasks push the new element to the end\n      } else if (prevArr.length < tasks.length) {\n        this.setState({\n          prevArr: [...prevArr, tasks[tasks.length - 1]]\n        });\n        var arr = prevArr; //if prev arr is larger than state.tasks filter out the corresponding element\n      } else if (prevArr.length > tasks.length) {\n        this.setState({\n          prevArr: prevArr.filter(task => task._id !== tasks._id)\n        });\n        var arr = prevArr;\n      } else {\n        return console.log(\"something did not go quite as planned with sorting...\");\n      }\n\n      arr = arr.slice();\n      arr.splice(newIndex < 0 ? arr.length + newIndex : newIndex, 0, arr.splice(oldIndex, 1)[0]);\n      console.log(\"after sort: \", arr);\n      this.setState({\n        tasks: arr,\n        prevArr: arr\n      }); // cookies.set(\"tasks\", this.state.tasks);\n    });\n\n    this.state = {\n      tasks: cookies.get(\"tasks\") || props.posts,\n      prevArr: [],\n      sorted: false\n    };\n  }\n\n  componentDidUpdate(prevState) {\n    if (prevState.tasks !== this.state.tasks) {\n      console.log(\"comp did update, set tasks!\");\n      cookies.set(\"tasks\", this.state.tasks);\n      this.setState;\n    } // if (this.state.tasks.length === 1) {\n    //   let firstId = cookies.get(\"taskId\");\n    //   let fakeobj = {\n    //     _id: firstId,\n    //     description: this.state.tasks[0].description,\n    //     completed: this.state.tasks[0].completed,\n    //     updatedAt: this.state.tasks[0].updatedAt\n    //   };\n    //   this.setState({ tasks: fakeobj });\n    // }\n\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    // if (!state.sorted) { if state.sorted is false\n    const {\n      type,\n      id,\n      todo\n    } = props.sortedContext.type;\n    const {\n      allCookies\n    } = props;\n    const {\n      tasks\n    } = state; // const taskId = cookies.get(\"taskId\");\n\n    switch (type) {\n      case \"ADD\":\n        return {\n          tasks: [...tasks, {\n            _id: allCookies.taskId,\n            //won't get the first addition\n            description: todo,\n            completed: false\n          }]\n        };\n        break;\n\n      case \"REMOVE\":\n        return {\n          tasks: tasks.filter(task => task._id !== id)\n        };\n\n      case \"TOGGLE\":\n        return {\n          tasks: tasks.map(task => task._id === id ? _objectSpread({}, task, {\n            completed: !task.completed\n          }) : task)\n        };\n        break;\n\n      case \"EDIT\":\n        return {\n          tasks: tasks.map(task => task._id === id ? _objectSpread({}, task, {\n            description: todo\n          }) : task)\n        };\n        break;\n\n      default:\n        return null;\n    } // } else return null;\n\n  }\n\n  render() {\n    const {\n      resetSort\n    } = this.props.sortedContext;\n    const {\n      tasks\n    } = this.state;\n    if (tasks.length) return __jsx(DraggableTodoList, {\n      axis: \"y\",\n      distance: 20,\n      onSortEnd: this.onSortEnd,\n      posts: tasks,\n      sorted: resetSort\n    });\n    return null;\n  }\n\n}\n\nexport default withCookies(withSortedContext(TodoList));","map":{"version":3,"sources":["/Users/ericowusu/Documents/React _Course_Projects/Next/first-next/components/TodoList.js"],"names":["React","Component","DraggableTodoList","withSortedContext","withCookies","Cookies","cookies","TodoList","constructor","props","oldIndex","newIndex","tasks","prevArr","state","console","log","length","arr","get","setState","filter","task","_id","slice","splice","posts","sorted","componentDidUpdate","prevState","set","getDerivedStateFromProps","type","id","todo","sortedContext","allCookies","taskId","description","completed","map","render","resetSort","onSortEnd"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport DraggableTodoList from \"./DraggableTodoList\";\nimport { withSortedContext } from \"./contexts/SortedContext\";\nimport { withCookies, Cookies } from \"react-cookie\";\nconst cookies = new Cookies();\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: cookies.get(\"tasks\") || props.posts,\n      prevArr: [],\n      sorted: false\n    };\n  }\n\n  onSortEnd = ({ oldIndex, newIndex }) => {\n    const { tasks, prevArr } = this.state;\n\n    console.log(\"before sort: \", prevArr);\n    if (prevArr.length === 0) {\n      var arr = cookies.get(\"tasks\");\n      //if prevArr is same size as state.tasks change nothing\n    } else if (prevArr.length === tasks.length) {\n      var arr = prevArr;\n      //if prev arr is smaller than state.tasks push the new element to the end\n    } else if (prevArr.length < tasks.length) {\n      this.setState({\n        prevArr: [...prevArr, tasks[tasks.length - 1]]\n      });\n      var arr = prevArr;\n      //if prev arr is larger than state.tasks filter out the corresponding element\n    } else if (prevArr.length > tasks.length) {\n      this.setState({\n        prevArr: prevArr.filter(task => task._id !== tasks._id)\n      });\n      var arr = prevArr;\n    } else {\n      return console.log(\n        \"something did not go quite as planned with sorting...\"\n      );\n    }\n\n    arr = arr.slice();\n    arr.splice(\n      newIndex < 0 ? arr.length + newIndex : newIndex,\n      0,\n      arr.splice(oldIndex, 1)[0]\n    );\n    console.log(\"after sort: \", arr);\n    this.setState({\n      tasks: arr,\n      prevArr: arr\n    });\n    // cookies.set(\"tasks\", this.state.tasks);\n  };\n\n  componentDidUpdate(prevState) {\n    if (prevState.tasks !== this.state.tasks) {\n      console.log(\"comp did update, set tasks!\");\n      cookies.set(\"tasks\", this.state.tasks);\n      this.setState;\n    }\n    // if (this.state.tasks.length === 1) {\n    //   let firstId = cookies.get(\"taskId\");\n    //   let fakeobj = {\n    //     _id: firstId,\n    //     description: this.state.tasks[0].description,\n    //     completed: this.state.tasks[0].completed,\n    //     updatedAt: this.state.tasks[0].updatedAt\n    //   };\n    //   this.setState({ tasks: fakeobj });\n    // }\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    // if (!state.sorted) { if state.sorted is false\n\n    const { type, id, todo } = props.sortedContext.type;\n    const { allCookies } = props;\n    const { tasks } = state;\n    // const taskId = cookies.get(\"taskId\");\n\n    switch (type) {\n      case \"ADD\":\n        return {\n          tasks: [\n            ...tasks,\n            {\n              _id: allCookies.taskId, //won't get the first addition\n              description: todo,\n              completed: false\n            }\n          ]\n        };\n        break;\n      case \"REMOVE\":\n        return { tasks: tasks.filter(task => task._id !== id) };\n      case \"TOGGLE\":\n        return {\n          tasks: tasks.map(task =>\n            task._id === id ? { ...task, completed: !task.completed } : task\n          )\n        };\n        break;\n      case \"EDIT\":\n        return {\n          tasks: tasks.map(task =>\n            task._id === id ? { ...task, description: todo } : task\n          )\n        };\n        break;\n      default:\n        return null;\n    }\n    // } else return null;\n  }\n\n  render() {\n    const { resetSort } = this.props.sortedContext;\n    const { tasks } = this.state;\n    if (tasks.length)\n      return (\n        <DraggableTodoList\n          axis=\"y\"\n          distance={20}\n          onSortEnd={this.onSortEnd}\n          posts={tasks}\n          sorted={resetSort}\n        ></DraggableTodoList>\n      );\n    return null;\n  }\n}\n\nexport default withCookies(withSortedContext(TodoList));\n"]},"metadata":{},"sourceType":"module"}