{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport axios from 'axios';\nimport Router from 'next/router';\nimport { Cookies } from 'react-cookie'; // set up cookies\n\nvar cookies = new Cookies();\nexport function handleAuthSSR(ctx) {\n  var token, proxyUrl, targetUrl, res, data;\n  return _regeneratorRuntime.async(function handleAuthSSR$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          token = null; // if context has request info aka Server Side\n\n          if (ctx.req) {\n            // ugly way to get cookie value from a string of values\n            // good enough for demostration\n            token = ctx.req.headers.cookie.replace(/(?:(?:^|.*;\\s*)token\\s*\\=\\s*([^;]*).*$)|^.*$/, '$1');\n          } else {\n            // we dont have request info aka Client Side\n            token = cookies.get('token');\n          }\n\n          proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n          targetUrl = 'https://owusu-task-manager.herokuapp.com/tasks';\n          _context.prev = 4;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(axios.get(proxyUrl + targetUrl, {\n            headers: {\n              Authorization: 'Bearer ' + token\n            }\n          }));\n\n        case 7:\n          res = _context.sent;\n          data = res.data; // const data = res.data\n\n          console.log(data);\n          return _context.abrupt(\"return\", {\n            posts: data\n          });\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](4);\n          console.error('Error:', _context.t0);\n\n          if (ctx.res) {\n            ctx.res.writeHead(302, {\n              Location: '/'\n            });\n            ctx.res.end();\n          } else {\n            Router.push('/');\n          }\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[4, 13]]);\n}","map":{"version":3,"sources":["/Users/ericowusu/Documents/React _Course_Projects/Next/first-next/components/handleAuthSSR.js"],"names":["axios","Router","Cookies","cookies","handleAuthSSR","ctx","token","req","headers","cookie","replace","get","proxyUrl","targetUrl","Authorization","res","data","console","log","posts","error","writeHead","Location","end","push"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,OAAT,QAAwB,cAAxB,C,CACA;;AACA,IAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB;AAEA,OAAO,SAAeE,aAAf,CAA6BC,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACDC,UAAAA,KADC,GACO,IADP,EAGL;;AACA,cAAID,GAAG,CAACE,GAAR,EAAa;AACX;AACA;AACAD,YAAAA,KAAK,GAAGD,GAAG,CAACE,GAAJ,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CACN,8CADM,EAEN,IAFM,CAAR;AAID,WAPD,MAOO;AACL;AACAJ,YAAAA,KAAK,GAAGH,OAAO,CAACQ,GAAR,CAAY,OAAZ,CAAR;AACD;;AACKC,UAAAA,QAfD,GAeY,sCAfZ;AAgBCC,UAAAA,SAhBD,GAgBa,gDAhBb;AAAA;AAAA;AAAA,2CAmBeb,KAAK,CAACW,GAAN,CAAUC,QAAQ,GAAGC,SAArB,EAAgC;AAChDL,YAAAA,OAAO,EAAE;AACPM,cAAAA,aAAa,EAAE,YAAYR;AADpB;AADuC,WAAhC,CAnBf;;AAAA;AAmBGS,UAAAA,GAnBH;AAwBKC,UAAAA,IAxBL,GAwBcD,GAxBd,CAwBKC,IAxBL,EAwBmB;;AACtBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAzBG,2CA0BI;AACLG,YAAAA,KAAK,EAAEH;AADF,WA1BJ;;AAAA;AAAA;AAAA;AA8BHC,UAAAA,OAAO,CAACG,KAAR,CAAc,QAAd;;AACA,cAAIf,GAAG,CAACU,GAAR,EAAa;AACXV,YAAAA,GAAG,CAACU,GAAJ,CAAQM,SAAR,CAAkB,GAAlB,EAAuB;AACrBC,cAAAA,QAAQ,EAAE;AADW,aAAvB;AAGAjB,YAAAA,GAAG,CAACU,GAAJ,CAAQQ,GAAR;AACD,WALD,MAKO;AACLtB,YAAAA,MAAM,CAACuB,IAAP,CAAY,GAAZ;AACD;;AAtCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios';\nimport Router from 'next/router';\nimport { Cookies } from 'react-cookie';\n// set up cookies\nconst cookies = new Cookies();\n\nexport async function handleAuthSSR(ctx) {\n  let token = null;\n\n  // if context has request info aka Server Side\n  if (ctx.req) {\n    // ugly way to get cookie value from a string of values\n    // good enough for demostration\n    token = ctx.req.headers.cookie.replace(\n      /(?:(?:^|.*;\\s*)token\\s*\\=\\s*([^;]*).*$)|^.*$/,\n      '$1'\n    );\n  } else {\n    // we dont have request info aka Client Side\n    token = cookies.get('token');\n  }\n  const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n  const targetUrl = 'https://owusu-task-manager.herokuapp.com/tasks';\n\n  try {\n    const res = await axios.get(proxyUrl + targetUrl, {\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    });\n    const { data } = res; // const data = res.data\n    console.log(data);\n    return {\n      posts: data\n    };\n  } catch (e) {\n    console.error('Error:', e);\n    if (ctx.res) {\n      ctx.res.writeHead(302, {\n        Location: '/'\n      });\n      ctx.res.end();\n    } else {\n      Router.push('/');\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}