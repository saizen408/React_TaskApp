{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useContext } from \"react\";\nimport Router from \"next/router\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Input from \"@material-ui/core/Input\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport styles from \"./styles/FormStyles\";\nimport { LanguageContext } from \"./contexts/LanguageContext\";\nimport { ThemeContext } from \"./contexts/ThemeContext\";\nimport { UserContext, AuthenticateContext } from \"./contexts/user.context\";\nimport { TodosContext } from \"./contexts/todos.context\";\nimport useInputState from \"./hooks/useInputState\";\nimport { Cookies } from \"react-cookie\";\nimport cubeSpinner from \"./styles/cubeSpinner\";\nimport { SnackbarProvider, useSnackbar } from \"notistack\";\nvar words = {\n  english: {\n    signIn: \"Sign In\",\n    email: \"Email Address\",\n    password: \"Password\",\n    remember: \"Remember Me\",\n    errorMessage: \"Email and/or Password incorrect\",\n    demoMessage: \"Welcome to Task App Demo! Email: taskappdemo@demo.com | Password: 1234567\"\n  },\n  french: {\n    signIn: \"Se Connecter\",\n    email: \"Adresse Électronique\",\n    password: \"Mot de Passe\",\n    remember: \"Souviens-toi De Moi\",\n    errorMessage: \"E-mail et / ou mot de passe incorrect\",\n    demoMessage: \"Welcome to Task App Demo. Email: taskappdemo@demo.com | Password: 1234567\"\n  },\n  spanish: {\n    signIn: \"Registrarse\",\n    email: \"Correo Electrónico\",\n    password: \"Contraseña\",\n    remember: \"Recuérdame\",\n    errorMessage: \"Correo electrónico y / o contraseña incorrectos\",\n    demoMessage: \"Welcome to Task App Demo. Email: taskappdemo@demo.com | Password: 1234567\"\n  },\n  german: {\n    signIn: \"anmelden\",\n    email: \"E-Mail-Addresse\",\n    password: \"Passwort\",\n    remember: \"Behalte mich in Erinnerung\",\n    errorMessage: \"E-Mail und / oder Passwort falsch\",\n    demoMessage: \"Welcome to Task App Demo. Email: taskappdemo@demo.com | Password: 1234567\"\n  },\n  日本語: {\n    signIn: \"サインイン\",\n    email: \"電子メールアドレス\",\n    password: \"パスワード\",\n    remember: \"私を覚えている\",\n    errorMessage: \"メールアドレスまたはパスワードが正しくありません\",\n    demoMessage: \"Welcome to Task App Demo. Email: taskappdemo@demo.com | Password: 1234567\"\n  }\n};\nvar cookies = new Cookies();\n\nfunction Form(props) {\n  var _useContext = useContext(LanguageContext),\n      language = _useContext.language,\n      changeLanguage = _useContext.changeLanguage;\n\n  var token = useContext(UserContext);\n  var authenticate = useContext(AuthenticateContext);\n  var classes = props.classes;\n  var _words$language = words[language],\n      email = _words$language.email,\n      signIn = _words$language.signIn,\n      password = _words$language.password,\n      remember = _words$language.remember,\n      errorMessage = _words$language.errorMessage,\n      demoMessage = _words$language.demoMessage;\n\n  var _useInputState = useInputState(\"\"),\n      _useInputState2 = _slicedToArray(_useInputState, 3),\n      emailVal = _useInputState2[0],\n      handleEmailChange = _useInputState2[1],\n      emailReset = _useInputState2[2];\n\n  var _useInputState3 = useInputState(\"\"),\n      _useInputState4 = _slicedToArray(_useInputState3, 3),\n      passVal = _useInputState4[0],\n      handlePassChange = _useInputState4[1],\n      passReset = _useInputState4[2]; // const [open, setSnackOpen] = React.useState(false);\n\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loading = _React$useState2[0],\n      setLoader = _React$useState2[1];\n\n  var _useSnackbar = useSnackbar(),\n      enqueueSnackbar = _useSnackbar.enqueueSnackbar,\n      closeSnackbar = _useSnackbar.closeSnackbar;\n\n  var handleError = function handleError() {\n    var message = errorMessage;\n    enqueueSnackbar(message, {\n      variant: \"error\"\n    });\n  };\n\n  var handleDemoMessage = function handleDemoMessage() {\n    var message = demoMessage;\n    enqueueSnackbar(message, {\n      onEnter: closeSnackbar(),\n      variant: \"info\",\n      anchorOrigin: {\n        vertical: \"bottom\",\n        horizontal: \"center\"\n      },\n      persist: true\n    });\n  }; // const handleClick = () => {\n  //   setSnackOpen(true);\n  // };\n  // const handleClose = (event, reason) => {\n  //   if (reason === \"clickaway\") {\n  //     return;\n  //   }\n  //   setSnackOpen(false);\n  // };\n\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    setLoader(true);\n    authenticate({\n      type: \"LOGIN\",\n      email: emailVal,\n      password: passVal\n    });\n    console.log(\"submitted!\");\n    setTimeout(function () {\n      if (token.error == true) {\n        console.log(\"setting loading to true\");\n        setLoader(false);\n        handleError(); // setSnackOpen(true);\n      }\n    }, 2000);\n    emailReset();\n    passReset();\n  };\n\n  if (loading) {\n    return __jsx(\"div\", {\n      className: classes.loader\n    }, cubeSpinner());\n  }\n\n  return __jsx(React.Fragment, null, handleDemoMessage(), __jsx(\"main\", {\n    className: classes.main\n  }, __jsx(Paper, {\n    elevation: 3,\n    className: classes.paper\n  }, __jsx(Avatar, {\n    className: classes.avatar\n  }, __jsx(LockOutlinedIcon, null)), __jsx(Typography, {\n    variant: \"h5\"\n  }, signIn), __jsx(Select, {\n    value: language,\n    onChange: changeLanguage\n  }, __jsx(MenuItem, {\n    value: \"english\"\n  }, \"English\"), __jsx(MenuItem, {\n    value: \"french\"\n  }, \"French\"), __jsx(MenuItem, {\n    value: \"spanish\"\n  }, \"Spanish\"), __jsx(MenuItem, {\n    value: \"german\"\n  }, \"German\"), __jsx(MenuItem, {\n    value: \"\\u65E5\\u672C\\u8A9E\"\n  }, \"\\u65E5\\u672C\\u8A9E\")), __jsx(\"form\", {\n    className: classes.form,\n    onSubmit: handleSubmit\n  }, __jsx(FormControl, {\n    margin: \"normal\",\n    required: true,\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    htmlFor: \"email\"\n  }, email), __jsx(Input, {\n    id: \"email\",\n    name: \"email\",\n    value: emailVal,\n    onChange: handleEmailChange,\n    autoFocus: true\n  })), __jsx(FormControl, {\n    margin: \"normal\",\n    required: true,\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    htmlFor: \"password\"\n  }, password), __jsx(Input, {\n    id: \"password\",\n    name: \"password\",\n    value: passVal,\n    onChange: handlePassChange,\n    autoFocus: true\n  })), __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      color: \"primary\"\n    }),\n    label: remember\n  }), __jsx(Button, {\n    variant: \"contained\",\n    type: \"submit\",\n    fullWidth: true,\n    color: \"primary\",\n    className: classes.submit\n  }, signIn)))));\n}\n\nexport default withStyles(styles)(Form);","map":{"version":3,"sources":["/Users/ericowusu/Documents/React _Course_Projects/Next/first-next/components/Form.js"],"names":["React","useContext","Router","Avatar","Button","FormControl","FormControlLabel","Checkbox","Input","InputLabel","LockOutlinedIcon","Paper","Typography","MenuItem","Select","Snackbar","IconButton","CloseIcon","withStyles","styles","LanguageContext","ThemeContext","UserContext","AuthenticateContext","TodosContext","useInputState","Cookies","cubeSpinner","SnackbarProvider","useSnackbar","words","english","signIn","email","password","remember","errorMessage","demoMessage","french","spanish","german","日本語","cookies","Form","props","language","changeLanguage","token","authenticate","classes","emailVal","handleEmailChange","emailReset","passVal","handlePassChange","passReset","useState","loading","setLoader","enqueueSnackbar","closeSnackbar","handleError","message","variant","handleDemoMessage","onEnter","anchorOrigin","vertical","horizontal","persist","handleSubmit","e","preventDefault","type","console","log","setTimeout","error","loader","main","paper","avatar","form","submit"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport Router from \"next/router\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Input from \"@material-ui/core/Input\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport styles from \"./styles/FormStyles\";\nimport { LanguageContext } from \"./contexts/LanguageContext\";\nimport { ThemeContext } from \"./contexts/ThemeContext\";\nimport { UserContext, AuthenticateContext } from \"./contexts/user.context\";\nimport { TodosContext } from \"./contexts/todos.context\";\nimport useInputState from \"./hooks/useInputState\";\nimport { Cookies } from \"react-cookie\";\nimport cubeSpinner from \"./styles/cubeSpinner\";\nimport { SnackbarProvider, useSnackbar } from \"notistack\";\n\nconst words = {\n  english: {\n    signIn: \"Sign In\",\n    email: \"Email Address\",\n    password: \"Password\",\n    remember: \"Remember Me\",\n    errorMessage: \"Email and/or Password incorrect\",\n    demoMessage:\n      \"Welcome to Task App Demo! Email: taskappdemo@demo.com | Password: 1234567\"\n  },\n  french: {\n    signIn: \"Se Connecter\",\n    email: \"Adresse Électronique\",\n    password: \"Mot de Passe\",\n    remember: \"Souviens-toi De Moi\",\n    errorMessage: \"E-mail et / ou mot de passe incorrect\",\n    demoMessage:\n      \"Welcome to Task App Demo. Email: taskappdemo@demo.com | Password: 1234567\"\n  },\n  spanish: {\n    signIn: \"Registrarse\",\n    email: \"Correo Electrónico\",\n    password: \"Contraseña\",\n    remember: \"Recuérdame\",\n    errorMessage: \"Correo electrónico y / o contraseña incorrectos\",\n    demoMessage:\n      \"Welcome to Task App Demo. Email: taskappdemo@demo.com | Password: 1234567\"\n  },\n  german: {\n    signIn: \"anmelden\",\n    email: \"E-Mail-Addresse\",\n    password: \"Passwort\",\n    remember: \"Behalte mich in Erinnerung\",\n    errorMessage: \"E-Mail und / oder Passwort falsch\",\n    demoMessage:\n      \"Welcome to Task App Demo. Email: taskappdemo@demo.com | Password: 1234567\"\n  },\n\n  日本語: {\n    signIn: \"サインイン\",\n    email: \"電子メールアドレス\",\n    password: \"パスワード\",\n    remember: \"私を覚えている\",\n    errorMessage: \"メールアドレスまたはパスワードが正しくありません\",\n    demoMessage:\n      \"Welcome to Task App Demo. Email: taskappdemo@demo.com | Password: 1234567\"\n  }\n};\n\nconst cookies = new Cookies();\nfunction Form(props) {\n  const { language, changeLanguage } = useContext(LanguageContext);\n  const token = useContext(UserContext);\n  const authenticate = useContext(AuthenticateContext);\n  const { classes } = props;\n  const {\n    email,\n    signIn,\n    password,\n    remember,\n    errorMessage,\n    demoMessage\n  } = words[language];\n  const [emailVal, handleEmailChange, emailReset] = useInputState(\"\");\n  const [passVal, handlePassChange, passReset] = useInputState(\"\");\n  // const [open, setSnackOpen] = React.useState(false);\n  const [loading, setLoader] = React.useState(false);\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  const handleError = () => {\n    const message = errorMessage;\n    enqueueSnackbar(message, {\n      variant: \"error\"\n    });\n  };\n\n  const handleDemoMessage = () => {\n    const message = demoMessage;\n\n    enqueueSnackbar(message, {\n      onEnter: closeSnackbar(),\n      variant: \"info\",\n      anchorOrigin: {\n        vertical: \"bottom\",\n        horizontal: \"center\"\n      },\n      persist: true\n    });\n  };\n\n  // const handleClick = () => {\n  //   setSnackOpen(true);\n  // };\n\n  // const handleClose = (event, reason) => {\n  //   if (reason === \"clickaway\") {\n  //     return;\n  //   }\n\n  //   setSnackOpen(false);\n  // };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setLoader(true);\n    authenticate({ type: \"LOGIN\", email: emailVal, password: passVal });\n    console.log(\"submitted!\");\n    setTimeout(() => {\n      if (token.error == true) {\n        console.log(\"setting loading to true\");\n        setLoader(false);\n        handleError();\n        // setSnackOpen(true);\n      }\n    }, 2000);\n    emailReset();\n    passReset();\n  };\n\n  if (loading) {\n    return <div className={classes.loader}>{cubeSpinner()}</div>;\n  }\n\n  return (\n    <>\n      {handleDemoMessage()}\n      <main className={classes.main}>\n        <Paper elevation={3} className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography variant=\"h5\">{signIn}</Typography>\n          <Select value={language} onChange={changeLanguage}>\n            <MenuItem value=\"english\">English</MenuItem>\n            <MenuItem value=\"french\">French</MenuItem>\n            <MenuItem value=\"spanish\">Spanish</MenuItem>\n            <MenuItem value=\"german\">German</MenuItem>\n            <MenuItem value=\"日本語\">日本語</MenuItem>\n          </Select>\n          {/* /*add the snackbar init here*/}\n          <form className={classes.form} onSubmit={handleSubmit}>\n            <FormControl margin=\"normal\" required fullWidth>\n              <InputLabel htmlFor=\"email\">{email}</InputLabel>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                value={emailVal}\n                onChange={handleEmailChange}\n                autoFocus\n              ></Input>\n            </FormControl>\n            <FormControl margin=\"normal\" required fullWidth>\n              <InputLabel htmlFor=\"password\">{password}</InputLabel>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                value={passVal}\n                onChange={handlePassChange}\n                autoFocus\n              ></Input>\n            </FormControl>\n            <FormControlLabel\n              control={<Checkbox color=\"primary\" />}\n              label={remember}\n            />\n            <Button\n              variant=\"contained\"\n              type=\"submit\"\n              fullWidth\n              color=\"primary\"\n              className={classes.submit}\n            >\n              {signIn}\n            </Button>\n          </form>\n        </Paper>\n      </main>\n    </>\n  );\n}\n\nexport default withStyles(styles)(Form);\n"]},"metadata":{},"sourceType":"module"}