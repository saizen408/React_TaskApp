{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport App from \"next/app\";\nimport PageContent from \"../components/PageContent\";\nimport { ThemeProvider } from \"../components/contexts/ThemeContext\";\nimport { LanguageProvider } from \"../components/contexts/LanguageContext\";\nimport { TodosProvider } from \"../components/contexts/todos.context\";\nimport { UserProvider } from \"../components/contexts/user.context\";\nimport { SnackbarProvider, useSnackbar } from \"notistack\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"../components/styles/SnackBarStyles\";\nimport Navbar from \"../components/Navbar\";\n\nclass MyApp extends App {\n  // Only uncomment this method if you have blocking data requirements for\n  // every single page in your application. This disables the ability to\n  // perform automatic static optimization, causing every page in your app to\n  // be server-side rendered.\n  //\n  // static async getInitialProps(appContext) {\n  //   // calls page's `getInitialProps` and fills `appProps.pageProps`\n  //   const appProps = await App.getInitialProps(appContext);\n  //\n  //   return { ...appProps }\n  // }\n  render() {\n    const {\n      Component,\n      pageProps,\n      classes\n    } = this.props;\n    return __jsx(\"div\", null, __jsx(ThemeProvider, null, __jsx(LanguageProvider, null, __jsx(SnackbarProvider, {\n      maxSnack: 3,\n      className: classes.root,\n      iconVariant: {\n        success: \"✅\",\n        error: \"⛔️\"\n      }\n    }, __jsx(PageContent, null, __jsx(UserProvider, null, __jsx(Navbar, null), __jsx(TodosProvider, null, __jsx(Component, pageProps))))))));\n  }\n\n}\n\nexport default withStyles(styles)(MyApp);","map":{"version":3,"sources":["/Users/ericowusu/Documents/React _Course_Projects/Next/first-next/pages/_app.js"],"names":["React","App","PageContent","ThemeProvider","LanguageProvider","TodosProvider","UserProvider","SnackbarProvider","useSnackbar","withStyles","styles","Navbar","MyApp","render","Component","pageProps","classes","props","root","success","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,aAAT,QAA8B,qCAA9B;AACA,SAASC,gBAAT,QAAiC,wCAAjC;AACA,SAASC,aAAT,QAA8B,sCAA9B;AACA,SAASC,YAAT,QAA6B,qCAA7B;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,WAA9C;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,qCAAnB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;;AAEA,MAAMC,KAAN,SAAoBX,GAApB,CAAwB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAY,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,SAAb;AAAwBC,MAAAA;AAAxB,QAAoC,KAAKC,KAA/C;AACA,WACE,mBACE,MAAC,aAAD,QACE,MAAC,gBAAD,QACE,MAAC,gBAAD;AACE,MAAA,QAAQ,EAAE,CADZ;AAEE,MAAA,SAAS,EAAED,OAAO,CAACE,IAFrB;AAGE,MAAA,WAAW,EAAE;AAAEC,QAAAA,OAAO,EAAE,GAAX;AAAgBC,QAAAA,KAAK,EAAE;AAAvB;AAHf,OAKE,MAAC,WAAD,QACE,MAAC,YAAD,QACE,MAAC,MAAD,OADF,EAEE,MAAC,aAAD,QACE,MAAC,SAAD,EAAeL,SAAf,CADF,CAFF,CADF,CALF,CADF,CADF,CADF,CADF;AAsBD;;AArCqB;;AAwCxB,eAAeN,UAAU,CAACC,MAAD,CAAV,CAAmBE,KAAnB,CAAf","sourcesContent":["import React from \"react\";\nimport App from \"next/app\";\nimport PageContent from \"../components/PageContent\";\nimport { ThemeProvider } from \"../components/contexts/ThemeContext\";\nimport { LanguageProvider } from \"../components/contexts/LanguageContext\";\nimport { TodosProvider } from \"../components/contexts/todos.context\";\nimport { UserProvider } from \"../components/contexts/user.context\";\nimport { SnackbarProvider, useSnackbar } from \"notistack\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"../components/styles/SnackBarStyles\";\n\nimport Navbar from \"../components/Navbar\";\n\nclass MyApp extends App {\n  // Only uncomment this method if you have blocking data requirements for\n  // every single page in your application. This disables the ability to\n  // perform automatic static optimization, causing every page in your app to\n  // be server-side rendered.\n  //\n  // static async getInitialProps(appContext) {\n  //   // calls page's `getInitialProps` and fills `appProps.pageProps`\n  //   const appProps = await App.getInitialProps(appContext);\n  //\n  //   return { ...appProps }\n  // }\n\n  render() {\n    const { Component, pageProps, classes } = this.props;\n    return (\n      <div>\n        <ThemeProvider>\n          <LanguageProvider>\n            <SnackbarProvider\n              maxSnack={3}\n              className={classes.root}\n              iconVariant={{ success: \"✅\", error: \"⛔️\" }}\n            >\n              <PageContent>\n                <UserProvider>\n                  <Navbar />\n                  <TodosProvider>\n                    <Component {...pageProps} />\n                  </TodosProvider>\n                </UserProvider>\n              </PageContent>\n            </SnackbarProvider>\n          </LanguageProvider>\n        </ThemeProvider>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(MyApp);\n"]},"metadata":{},"sourceType":"module"}