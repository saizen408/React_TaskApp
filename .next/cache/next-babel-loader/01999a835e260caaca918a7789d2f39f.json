{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport axios from \"axios\";\nimport Router from \"next/router\";\nimport { Cookies } from \"react-cookie\"; // set up cookies\n\nvar cookies = new Cookies();\nexport function handleAuthSSR(ctx) {\n  var token, proxyUrl, targetUrl, res;\n  return _regeneratorRuntime.async(function handleAuthSSR$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          token = null; // // if context has request info aka Server Side\n          // if (ctx.req) {\n          //   // ugly way to get cookie value from a string of values\n          //   // good enough for demostration\n          //   token = ctx.req.headers.cookie.replace(\n          //     /(?:(?:^|.*;\\s*)token\\s*\\=\\s*([^;]*).*$)|^.*$/,\n          //     '$1'\n          //   );\n          // } else {\n          // we dont have request info aka Client Side\n\n          token = cookies.get(\"token\");\n          console.log(\"got the token from authssr:\", token); // }\n\n          proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\n          targetUrl = \"https://owusu-task-manager.herokuapp.com/tasks\";\n          _context.prev = 5;\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(axios.get(proxyUrl + targetUrl, {\n            headers: {\n              Authorization: \"Bearer \" + token\n            }\n          }));\n\n        case 8:\n          res = _context.sent;\n          console.log(res);\n          return _context.abrupt(\"return\", res);\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](5);\n          console.error(\"Error:\", _context.t0);\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[5, 13]]);\n}","map":{"version":3,"sources":["/Users/ericowusu/Documents/React _Course_Projects/Next/first-next/components/handleAuthSSR.js"],"names":["axios","Router","Cookies","cookies","handleAuthSSR","ctx","token","get","console","log","proxyUrl","targetUrl","headers","Authorization","res","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,OAAT,QAAwB,cAAxB,C,CACA;;AACA,IAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB;AAEA,OAAO,SAAeE,aAAf,CAA6BC,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACDC,UAAAA,KADC,GACO,IADP,EAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,UAAAA,KAAK,GAAGH,OAAO,CAACI,GAAR,CAAY,OAAZ,CAAR;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CH,KAA3C,EAdK,CAeL;;AACMI,UAAAA,QAhBD,GAgBY,sCAhBZ;AAiBCC,UAAAA,SAjBD,GAiBa,gDAjBb;AAAA;AAAA;AAAA,2CAoBeX,KAAK,CAACO,GAAN,CAAUG,QAAQ,GAAGC,SAArB,EAAgC;AAChDC,YAAAA,OAAO,EAAE;AACPC,cAAAA,aAAa,EAAE,YAAYP;AADpB;AADuC,WAAhC,CApBf;;AAAA;AAoBGQ,UAAAA,GApBH;AA0BHN,UAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AA1BG,2CA2BIA,GA3BJ;;AAAA;AAAA;AAAA;AA6BHN,UAAAA,OAAO,CAACO,KAAR,CAAc,QAAd;;AA7BG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from \"axios\";\nimport Router from \"next/router\";\nimport { Cookies } from \"react-cookie\";\n// set up cookies\nconst cookies = new Cookies();\n\nexport async function handleAuthSSR(ctx) {\n  let token = null;\n\n  // // if context has request info aka Server Side\n  // if (ctx.req) {\n  //   // ugly way to get cookie value from a string of values\n  //   // good enough for demostration\n  //   token = ctx.req.headers.cookie.replace(\n  //     /(?:(?:^|.*;\\s*)token\\s*\\=\\s*([^;]*).*$)|^.*$/,\n  //     '$1'\n  //   );\n  // } else {\n  // we dont have request info aka Client Side\n  token = cookies.get(\"token\");\n  console.log(\"got the token from authssr:\", token);\n  // }\n  const proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\n  const targetUrl = \"https://owusu-task-manager.herokuapp.com/tasks\";\n\n  try {\n    const res = await axios.get(proxyUrl + targetUrl, {\n      headers: {\n        Authorization: \"Bearer \" + token\n      }\n    });\n\n    console.log(res);\n    return res;\n  } catch (e) {\n    console.error(\"Error:\", e);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}