{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, memo, useEffect } from \"react\";\nimport { SortableElement } from \"react-sortable-hoc\";\nimport useToggleState from \"./hooks/useToggleState\";\nimport EditTodoForm from \"./EditTodoForm\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { useSnackbar } from \"notistack\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport { DispatchContext } from \"./contexts/todos.context\";\nimport { LanguageContext } from \"./contexts/LanguageContext\";\nimport { Paper } from \"@material-ui/core\";\nimport moment from \"moment\";\nimport { words } from \"./words\";\nconst DraggableTodo = SortableElement(({\n  _id,\n  description,\n  completed,\n  updatedAt,\n  sorted,\n  tasksDBIdx\n}) => {\n  const dispatch = useContext(DispatchContext);\n  const {\n    language\n  } = useContext(LanguageContext);\n  const [isEditing, toggle] = useToggleState(false);\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    lastUpdated\n  } = words[language];\n\n  const handleDeleteClick = () => {\n    enqueueSnackbar(`❌ Deleted Task: \"${description}\"`);\n  };\n\n  const handleToggleClick = () => {\n    enqueueSnackbar(`Good work! 💪 Task: \"${description}\" completed!`);\n  };\n\n  const formatedDate = () => {\n    moment.locale(language);\n    return moment(updatedAt).format(\"lll\");\n  }; // useEffect(() => {\n  //   window.localStorage.setItem(key, JSON.stringify(state));\n  // }, [tasksDBIdx]);\n\n\n  return __jsx(Paper, {\n    elevation: 3\n  }, __jsx(ListItem, {\n    style: {\n      height: \"65px\"\n    },\n    divider: true\n  }, isEditing ? __jsx(EditTodoForm, {\n    _id: _id,\n    tasksDBIdx: tasksDBIdx,\n    sorted: sorted,\n    description: description,\n    toggleEditForm: toggle\n  }) : __jsx(React.Fragment, null, __jsx(Switch, {\n    tabIndex: -1,\n    onChange: () => {\n      sorted({\n        type: \"TOGGLE\",\n        id: _id,\n        completed: completed\n      });\n\n      if (tasksDBIdx) {\n        dispatch({\n          type: \"TOGGLE\",\n          id: tasksDBIdx._id,\n          completed: completed\n        });\n      }\n\n      console.log(completed);\n      completed ? null : handleToggleClick();\n    },\n    checked: completed\n  }), __jsx(ListItemText, {\n    style: {\n      textDecoration: completed ? \"line-through\" : \"none\"\n    },\n    primary: description,\n    secondary: `${lastUpdated}: ${formatedDate()}`\n  }), __jsx(ListItemSecondaryAction, null, __jsx(IconButton, {\n    \"aria-label\": \"Delete\",\n    onClick: () => {\n      sorted({\n        type: \"REMOVE\",\n        id: _id\n      });\n      dispatch({\n        type: \"REMOVE\",\n        id: tasksDBIdx._id\n      });\n      handleDeleteClick();\n    }\n  }, __jsx(DeleteIcon, null)), __jsx(IconButton, {\n    \"aria-label\": \"Edit\",\n    onClick: toggle\n  }, __jsx(EditIcon, null))), \" \")));\n});\nexport default memo(DraggableTodo);","map":{"version":3,"sources":["/Users/ericowusu/Documents/React _Course_Projects/Next/first-next/components/DraggableTodo.js"],"names":["React","useContext","memo","useEffect","SortableElement","useToggleState","EditTodoForm","ListItemText","ListItem","IconButton","DeleteIcon","EditIcon","Switch","useSnackbar","ListItemSecondaryAction","DispatchContext","LanguageContext","Paper","moment","words","DraggableTodo","_id","description","completed","updatedAt","sorted","tasksDBIdx","dispatch","language","isEditing","toggle","enqueueSnackbar","lastUpdated","handleDeleteClick","handleToggleClick","formatedDate","locale","format","height","type","id","console","log","textDecoration"],"mappings":"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","sourcesContent":["import React, { useContext, memo, useEffect } from \"react\";\nimport { SortableElement } from \"react-sortable-hoc\";\nimport useToggleState from \"./hooks/useToggleState\";\nimport EditTodoForm from \"./EditTodoForm\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { useSnackbar } from \"notistack\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport { DispatchContext } from \"./contexts/todos.context\";\nimport { LanguageContext } from \"./contexts/LanguageContext\";\nimport { Paper } from \"@material-ui/core\";\nimport moment from \"moment\";\nimport { words } from \"./words\";\n\nconst DraggableTodo = SortableElement(\n  ({ _id, description, completed, updatedAt, sorted, tasksDBIdx }) => {\n    const dispatch = useContext(DispatchContext);\n    const { language } = useContext(LanguageContext);\n    const [isEditing, toggle] = useToggleState(false);\n    const { enqueueSnackbar } = useSnackbar();\n    const { lastUpdated } = words[language];\n\n    const handleDeleteClick = () => {\n      enqueueSnackbar(`❌ Deleted Task: \"${description}\"`);\n    };\n\n    const handleToggleClick = () => {\n      enqueueSnackbar(`Good work! 💪 Task: \"${description}\" completed!`);\n    };\n\n    const formatedDate = () => {\n      moment.locale(language);\n      return moment(updatedAt).format(\"lll\");\n    };\n\n    // useEffect(() => {\n    //   window.localStorage.setItem(key, JSON.stringify(state));\n    // }, [tasksDBIdx]);\n\n    return (\n      <Paper elevation={3}>\n        <ListItem style={{ height: \"65px\" }} divider={true}>\n          {isEditing ? (\n            <EditTodoForm\n              _id={_id}\n              tasksDBIdx={tasksDBIdx}\n              sorted={sorted}\n              description={description}\n              toggleEditForm={toggle}\n            />\n          ) : (\n            <>\n              <Switch\n                tabIndex={-1}\n                onChange={() => {\n                  sorted({ type: \"TOGGLE\", id: _id, completed: completed });\n                  if (tasksDBIdx) {\n                    dispatch({\n                      type: \"TOGGLE\",\n                      id: tasksDBIdx._id,\n                      completed: completed\n                    });\n                  }\n                  console.log(completed);\n                  completed ? null : handleToggleClick();\n                }}\n                checked={completed}\n              />\n              <ListItemText\n                style={{ textDecoration: completed ? \"line-through\" : \"none\" }}\n                primary={description}\n                secondary={`${lastUpdated}: ${formatedDate()}`}\n              ></ListItemText>\n              <ListItemSecondaryAction>\n                <IconButton\n                  aria-label=\"Delete\"\n                  onClick={() => {\n                    sorted({ type: \"REMOVE\", id: _id });\n                    dispatch({ type: \"REMOVE\", id: tasksDBIdx._id });\n                    handleDeleteClick();\n                  }}\n                >\n                  <DeleteIcon></DeleteIcon>\n                </IconButton>\n                <IconButton aria-label=\"Edit\" onClick={toggle}>\n                  <EditIcon></EditIcon>\n                </IconButton>\n              </ListItemSecondaryAction>{\" \"}\n            </>\n          )}\n        </ListItem>\n      </Paper>\n    );\n  }\n);\n\nexport default memo(DraggableTodo);\n"]},"metadata":{},"sourceType":"module"}