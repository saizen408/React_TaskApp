{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component, createContext } from 'react';\nexport const LanguageContext = createContext();\nexport class LanguageProvider extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      language: 'english',\n      token: ''\n    };\n    this.changeLanguage = this.changeLanguage.bind(this);\n  }\n\n  changeLanguage(e) {\n    this.setState({\n      language: e.target.value\n    });\n  }\n\n  render() {\n    return __jsx(LanguageContext.Provider, {\n      value: _objectSpread({}, this.state, {\n        changeLanguage: this.changeLanguage\n      })\n    }, this.props.children);\n  }\n\n}\nexport const withLanguageContext = Component => props => __jsx(LanguageContext.Consumer, null, value => __jsx(Component, _extends({\n  languageContext: value\n}, props)));","map":{"version":3,"sources":["/Users/ericowusu/Documents/React _Course_Projects/Next/first-next/components/contexts/LanguageContext.js"],"names":["React","Component","createContext","LanguageContext","LanguageProvider","constructor","props","state","language","token","changeLanguage","bind","e","setState","target","value","render","children","withLanguageContext"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,aAA3B,QAAgD,OAAhD;AAEA,OAAO,MAAMC,eAAe,GAAGD,aAAa,EAArC;AAEP,OAAO,MAAME,gBAAN,SAA+BH,SAA/B,CAAyC;AAC9CI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,QAAQ,EAAE,SAAZ;AAAuBC,MAAAA,KAAK,EAAE;AAA9B,KAAb;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;AACD;;AACDD,EAAAA,cAAc,CAACE,CAAD,EAAI;AAChB,SAAKC,QAAL,CAAc;AAAEL,MAAAA,QAAQ,EAAEI,CAAC,CAACE,MAAF,CAASC;AAArB,KAAd;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACE,MAAC,eAAD,CAAiB,QAAjB;AACE,MAAA,KAAK,oBAAO,KAAKT,KAAZ;AAAmBG,QAAAA,cAAc,EAAE,KAAKA;AAAxC;AADP,OAGG,KAAKJ,KAAL,CAAWW,QAHd,CADF;AAOD;;AAlB6C;AAqBhD,OAAO,MAAMC,mBAAmB,GAAGjB,SAAS,IAAIK,KAAK,IACnD,MAAC,eAAD,CAAiB,QAAjB,QACGS,KAAK,IAAI,MAAC,SAAD;AAAW,EAAA,eAAe,EAAEA;AAA5B,GAAuCT,KAAvC,EADZ,CADK","sourcesContent":["import React, { Component, createContext } from 'react';\n\nexport const LanguageContext = createContext();\n\nexport class LanguageProvider extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { language: 'english', token: '' };\n    this.changeLanguage = this.changeLanguage.bind(this);\n  }\n  changeLanguage(e) {\n    this.setState({ language: e.target.value });\n  }\n\n  render() {\n    return (\n      <LanguageContext.Provider\n        value={{ ...this.state, changeLanguage: this.changeLanguage }}\n      >\n        {this.props.children}\n      </LanguageContext.Provider>\n    );\n  }\n}\n\nexport const withLanguageContext = Component => props => (\n  <LanguageContext.Consumer>\n    {value => <Component languageContext={value} {...props} />}\n  </LanguageContext.Consumer>\n);\n"]},"metadata":{},"sourceType":"module"}