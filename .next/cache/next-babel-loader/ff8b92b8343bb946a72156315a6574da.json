{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _readOnlyError from \"@babel/runtime-corejs2/helpers/esm/readOnlyError\";\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport styles from './styles/FormStyles';\nimport { LanguageContext } from './contexts/LanguageContext';\nimport { ThemeContext } from './contexts/ThemeContext';\nimport useInputState from './hooks/useInputState';\nvar words = {\n  english: {\n    signIn: 'Sign In',\n    email: 'Email Address',\n    password: 'Password',\n    remember: 'Remember Me'\n  },\n  french: {\n    signIn: 'Se Connecter',\n    email: 'Adresse Électronique',\n    password: 'Mot de Passe',\n    remember: 'Souviens-toi De Moi'\n  },\n  spanish: {\n    signIn: 'Registrarse',\n    email: 'Correo Electrónico',\n    password: 'Contraseña',\n    remember: 'Recuérdame'\n  },\n  german: {\n    signIn: 'anmelden',\n    email: 'E-Mail-Addresse',\n    password: 'Passwort',\n    remember: 'Behalte mich in Erinnerung'\n  },\n  日本語: {\n    signIn: 'サインイン',\n    email: '電子メールアドレス',\n    password: 'パスワード',\n    remember: '私を覚えている'\n  }\n};\n\nfunction Form(props) {\n  var _this = this;\n\n  var _useContext = useContext(LanguageContext),\n      language = _useContext.language,\n      changeLanguage = _useContext.changeLanguage,\n      token = _useContext.token;\n\n  var classes = props.classes;\n  var _words$language = words[language],\n      email = _words$language.email,\n      signIn = _words$language.signIn,\n      password = _words$language.password,\n      remember = _words$language.remember;\n\n  var _useInputState = useInputState(''),\n      _useInputState2 = _slicedToArray(_useInputState, 3),\n      value = _useInputState2[0],\n      handleChange = _useInputState2[1],\n      reset = _useInputState2[2];\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setSnackOpen = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      loading = _React$useState4[0],\n      setLoader = _React$useState4[1];\n\n  var handleClick = function handleClick() {\n    setSnackOpen(true);\n  };\n\n  var handleClose = function handleClose(event, reason) {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setSnackOpen(false);\n  };\n\n  var handleSubmit = function handleSubmit(evt) {\n    var proxyUrl, url, response, userInfo;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            evt.preventDefault(); //toggle loader\n\n            setLoader(true);\n            _context.prev = 2;\n            proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n            url = 'https://owusu-task-manager.herokuapp.com/users/login';\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(fetch(proxyUrl + url, {\n              method: 'POST',\n              body: _JSON$stringify(_this.state),\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            }));\n\n          case 7:\n            response = _context.sent;\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 10:\n            userInfo = _context.sent;\n            token = (_readOnlyError(\"token\"), userInfo.token);\n            setLoader(false); // this.setState(() => ({ loading: false, token: userInfo.token }));\n\n            console.log(userInfo); // Router.push('/TodoAppPage');\n\n            _context.next = 22;\n            break;\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](2);\n            console.error('Error:', _context.t0);\n            Router.push('/');\n            setLoader(false);\n            setSnackOpen(true); // this.setState({ email: '', password: '' });\n\n          case 22:\n            if (!loading) {\n              _context.next = 24;\n              break;\n            }\n\n            return _context.abrupt(\"return\", __jsx(\"div\", {\n              className: classes.loader\n            }, cubeSpinner()));\n\n          case 24:\n            return _context.abrupt(\"return\", __jsx(\"main\", {\n              className: classes.main\n            }, __jsx(Paper, {\n              className: classes.paper\n            }, __jsx(Avatar, {\n              className: classes.avatar\n            }, __jsx(LockOutlinedIcon, null)), __jsx(Typography, {\n              variant: \"h5\"\n            }, signIn), __jsx(Select, {\n              value: language,\n              onChange: changeLanguage\n            }, __jsx(MenuItem, {\n              value: \"english\"\n            }, \"English\"), __jsx(MenuItem, {\n              value: \"french\"\n            }, \"French\"), __jsx(MenuItem, {\n              value: \"spanish\"\n            }, \"Spanish\"), __jsx(MenuItem, {\n              value: \"german\"\n            }, \"German\"), __jsx(MenuItem, {\n              value: \"\\u65E5\\u672C\\u8A9E\"\n            }, \"\\u65E5\\u672C\\u8A9E\")), __jsx(\"form\", {\n              className: classes.form,\n              onSubmit: function onSubmit(e) {\n                e.preventDefault();\n                dispatch({\n                  type: 'LOGIN',\n                  task: value\n                });\n                reset();\n              }\n            }, __jsx(FormControl, {\n              margin: \"normal\",\n              required: true,\n              fullWidth: true\n            }, __jsx(InputLabel, {\n              htmlFor: \"email\"\n            }, email), __jsx(Input, {\n              id: \"email\",\n              name: \"email\",\n              autoFocus: true\n            })), __jsx(FormControl, {\n              margin: \"normal\",\n              required: true,\n              fullWidth: true\n            }, __jsx(InputLabel, {\n              htmlFor: \"password\",\n              value: value,\n              onChange: handleChange\n            }, password), __jsx(Input, {\n              id: \"password\",\n              name: \"password\",\n              autoFocus: true\n            })), __jsx(FormControlLabel, {\n              control: __jsx(Checkbox, {\n                color: \"primary\"\n              }),\n              label: remember\n            }), __jsx(Button, {\n              variant: \"contained\",\n              type: \"submit\",\n              fullWidth: true,\n              color: \"primary\",\n              className: classes.submit\n            }, signIn))), __jsx(Button, {\n              onClick: handleClick\n            }, \"Open simple snackbar\"), __jsx(Snackbar, {\n              anchorOrigin: {\n                vertical: 'bottom',\n                horizontal: 'left'\n              },\n              open: open,\n              autoHideDuration: 3000,\n              onClose: handleClose,\n              ContentProps: {\n                'aria-describedby': 'message-id'\n              },\n              message: __jsx(\"span\", {\n                id: \"message-id\"\n              }, \"Email and/or Password is incorrect\"),\n              action: [__jsx(IconButton, {\n                key: \"close\",\n                \"aria-label\": \"close\",\n                color: \"inherit\",\n                className: classes.close,\n                onClick: handleClose\n              }, __jsx(CloseIcon, null))]\n            })));\n\n          case 25:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 16]]);\n  };\n}\n\nexport default withStyles(styles)(Form);","map":{"version":3,"sources":["/Users/ericowusu/Documents/React _Course_Projects/Next/first-next/components/Form.js"],"names":["React","useContext","Avatar","Button","FormControl","FormControlLabel","Checkbox","Input","InputLabel","LockOutlinedIcon","Paper","Typography","MenuItem","Select","Snackbar","IconButton","CloseIcon","withStyles","styles","LanguageContext","ThemeContext","useInputState","words","english","signIn","email","password","remember","french","spanish","german","日本語","Form","props","language","changeLanguage","token","classes","value","handleChange","reset","useState","open","setSnackOpen","loading","setLoader","handleClick","handleClose","event","reason","handleSubmit","evt","preventDefault","proxyUrl","url","fetch","method","body","state","headers","response","json","userInfo","console","log","error","Router","push","loader","cubeSpinner","main","paper","avatar","form","e","dispatch","type","task","submit","vertical","horizontal","close"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport styles from './styles/FormStyles';\nimport { LanguageContext } from './contexts/LanguageContext';\nimport { ThemeContext } from './contexts/ThemeContext';\nimport useInputState from './hooks/useInputState';\n\nconst words = {\n  english: {\n    signIn: 'Sign In',\n    email: 'Email Address',\n    password: 'Password',\n    remember: 'Remember Me'\n  },\n  french: {\n    signIn: 'Se Connecter',\n    email: 'Adresse Électronique',\n    password: 'Mot de Passe',\n    remember: 'Souviens-toi De Moi'\n  },\n  spanish: {\n    signIn: 'Registrarse',\n    email: 'Correo Electrónico',\n    password: 'Contraseña',\n    remember: 'Recuérdame'\n  },\n  german: {\n    signIn: 'anmelden',\n    email: 'E-Mail-Addresse',\n    password: 'Passwort',\n    remember: 'Behalte mich in Erinnerung'\n  },\n\n  日本語: {\n    signIn: 'サインイン',\n    email: '電子メールアドレス',\n    password: 'パスワード',\n    remember: '私を覚えている'\n  }\n};\n\nfunction Form(props) {\n  const { language, changeLanguage, token } = useContext(LanguageContext);\n  const { classes } = props;\n  const { email, signIn, password, remember } = words[language];\n  const [value, handleChange, reset] = useInputState('');\n  const [open, setSnackOpen] = React.useState(false);\n  const [loading, setLoader] = React.useState(false);\n\n  const handleClick = () => {\n    setSnackOpen(true);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setSnackOpen(false);\n  };\n\n  const handleSubmit = async evt => {\n    evt.preventDefault();\n    //toggle loader\n    setLoader(true);\n\n    try {\n      const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n      const url = 'https://owusu-task-manager.herokuapp.com/users/login';\n      const response = await fetch(proxyUrl + url, {\n        method: 'POST',\n        body: JSON.stringify(this.state),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      const userInfo = await response.json();\n      token = userInfo.token;\n      setLoader(false);\n      // this.setState(() => ({ loading: false, token: userInfo.token }));\n\n      console.log(userInfo);\n      // Router.push('/TodoAppPage');\n    } catch (error) {\n      console.error('Error:', error);\n      Router.push('/');\n      setLoader(false);\n      setSnackOpen(true);\n\n      // this.setState({ email: '', password: '' });\n    }\n\n    if (loading) {\n      return <div className={classes.loader}>{cubeSpinner()}</div>;\n    }\n\n    return (\n      <main className={classes.main}>\n        <Paper className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography variant=\"h5\">{signIn}</Typography>\n          <Select value={language} onChange={changeLanguage}>\n            <MenuItem value=\"english\">English</MenuItem>\n            <MenuItem value=\"french\">French</MenuItem>\n            <MenuItem value=\"spanish\">Spanish</MenuItem>\n            <MenuItem value=\"german\">German</MenuItem>\n            <MenuItem value=\"日本語\">日本語</MenuItem>\n          </Select>\n          <form\n            className={classes.form}\n            onSubmit={e => {\n              e.preventDefault();\n              dispatch({ type: 'LOGIN', task: value });\n              reset();\n            }}\n          >\n            <FormControl margin=\"normal\" required fullWidth>\n              <InputLabel htmlFor=\"email\">{email}</InputLabel>\n              <Input id=\"email\" name=\"email\" autoFocus></Input>\n            </FormControl>\n            <FormControl margin=\"normal\" required fullWidth>\n              <InputLabel\n                htmlFor=\"password\"\n                value={value}\n                onChange={handleChange}\n              >\n                {password}\n              </InputLabel>\n              <Input id=\"password\" name=\"password\" autoFocus></Input>\n            </FormControl>\n            <FormControlLabel\n              control={<Checkbox color=\"primary\" />}\n              label={remember}\n            />\n            <Button\n              variant=\"contained\"\n              type=\"submit\"\n              fullWidth\n              color=\"primary\"\n              className={classes.submit}\n            >\n              {signIn}\n            </Button>\n          </form>\n        </Paper>\n        <Button onClick={handleClick}>Open simple snackbar</Button>\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left'\n          }}\n          open={open}\n          autoHideDuration={3000}\n          onClose={handleClose}\n          ContentProps={{\n            'aria-describedby': 'message-id'\n          }}\n          message={\n            <span id=\"message-id\">Email and/or Password is incorrect</span>\n          }\n          action={[\n            <IconButton\n              key=\"close\"\n              aria-label=\"close\"\n              color=\"inherit\"\n              className={classes.close}\n              onClick={handleClose}\n            >\n              <CloseIcon />\n            </IconButton>\n          ]}\n        />\n      </main>\n    );\n  };\n}\n\nexport default withStyles(styles)(Form);\n"]},"metadata":{},"sourceType":"module"}